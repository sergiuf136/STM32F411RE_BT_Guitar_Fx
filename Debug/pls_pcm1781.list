
pls_pcm1781.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007904  08007904  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800790c  0800790c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007910  08007910  00017910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08007914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000326c  2000007c  08007990  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200032e8  08007990  000232e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014209  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003471  00000000  00000000  000342b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a613  00000000  00000000  00039898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017645  00000000  00000000  00053eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ddaa  00000000  00000000  0006b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010929a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005284  00000000  00000000  001092ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800763c 	.word	0x0800763c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800763c 	.word	0x0800763c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b974 	b.w	8000c0c <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	4604      	mov	r4, r0
 8000944:	468e      	mov	lr, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d14d      	bne.n	80009e6 <__udivmoddi4+0xaa>
 800094a:	428a      	cmp	r2, r1
 800094c:	4694      	mov	ip, r2
 800094e:	d969      	bls.n	8000a24 <__udivmoddi4+0xe8>
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	b152      	cbz	r2, 800096c <__udivmoddi4+0x30>
 8000956:	fa01 f302 	lsl.w	r3, r1, r2
 800095a:	f1c2 0120 	rsb	r1, r2, #32
 800095e:	fa20 f101 	lsr.w	r1, r0, r1
 8000962:	fa0c fc02 	lsl.w	ip, ip, r2
 8000966:	ea41 0e03 	orr.w	lr, r1, r3
 800096a:	4094      	lsls	r4, r2
 800096c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000970:	0c21      	lsrs	r1, r4, #16
 8000972:	fbbe f6f8 	udiv	r6, lr, r8
 8000976:	fa1f f78c 	uxth.w	r7, ip
 800097a:	fb08 e316 	mls	r3, r8, r6, lr
 800097e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000982:	fb06 f107 	mul.w	r1, r6, r7
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000992:	f080 811f 	bcs.w	8000bd4 <__udivmoddi4+0x298>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 811c 	bls.w	8000bd4 <__udivmoddi4+0x298>
 800099c:	3e02      	subs	r6, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b0:	fb00 f707 	mul.w	r7, r0, r7
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x92>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80009c0:	f080 810a 	bcs.w	8000bd8 <__udivmoddi4+0x29c>
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	f240 8107 	bls.w	8000bd8 <__udivmoddi4+0x29c>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009d2:	1be4      	subs	r4, r4, r7
 80009d4:	2600      	movs	r6, #0
 80009d6:	b11d      	cbz	r5, 80009e0 <__udivmoddi4+0xa4>
 80009d8:	40d4      	lsrs	r4, r2
 80009da:	2300      	movs	r3, #0
 80009dc:	e9c5 4300 	strd	r4, r3, [r5]
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d909      	bls.n	80009fe <__udivmoddi4+0xc2>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	f000 80ef 	beq.w	8000bce <__udivmoddi4+0x292>
 80009f0:	2600      	movs	r6, #0
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	4630      	mov	r0, r6
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	fab3 f683 	clz	r6, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d14a      	bne.n	8000a9c <__udivmoddi4+0x160>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d302      	bcc.n	8000a10 <__udivmoddi4+0xd4>
 8000a0a:	4282      	cmp	r2, r0
 8000a0c:	f200 80f9 	bhi.w	8000c02 <__udivmoddi4+0x2c6>
 8000a10:	1a84      	subs	r4, r0, r2
 8000a12:	eb61 0303 	sbc.w	r3, r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	469e      	mov	lr, r3
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d0e0      	beq.n	80009e0 <__udivmoddi4+0xa4>
 8000a1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a22:	e7dd      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000a24:	b902      	cbnz	r2, 8000a28 <__udivmoddi4+0xec>
 8000a26:	deff      	udf	#255	; 0xff
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	f040 8092 	bne.w	8000b56 <__udivmoddi4+0x21a>
 8000a32:	eba1 010c 	sub.w	r1, r1, ip
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f fe8c 	uxth.w	lr, ip
 8000a3e:	2601      	movs	r6, #1
 8000a40:	0c20      	lsrs	r0, r4, #16
 8000a42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a46:	fb07 1113 	mls	r1, r7, r3, r1
 8000a4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a4e:	fb0e f003 	mul.w	r0, lr, r3
 8000a52:	4288      	cmp	r0, r1
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x12c>
 8000a56:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x12a>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f200 80cb 	bhi.w	8000bfc <__udivmoddi4+0x2c0>
 8000a66:	4643      	mov	r3, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a70:	fb07 1110 	mls	r1, r7, r0, r1
 8000a74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a78:	fb0e fe00 	mul.w	lr, lr, r0
 8000a7c:	45a6      	cmp	lr, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x156>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a88:	d202      	bcs.n	8000a90 <__udivmoddi4+0x154>
 8000a8a:	45a6      	cmp	lr, r4
 8000a8c:	f200 80bb 	bhi.w	8000c06 <__udivmoddi4+0x2ca>
 8000a90:	4608      	mov	r0, r1
 8000a92:	eba4 040e 	sub.w	r4, r4, lr
 8000a96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a9a:	e79c      	b.n	80009d6 <__udivmoddi4+0x9a>
 8000a9c:	f1c6 0720 	rsb	r7, r6, #32
 8000aa0:	40b3      	lsls	r3, r6
 8000aa2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aa6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aaa:	fa20 f407 	lsr.w	r4, r0, r7
 8000aae:	fa01 f306 	lsl.w	r3, r1, r6
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	40f9      	lsrs	r1, r7
 8000ab6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aba:	fa00 f306 	lsl.w	r3, r0, r6
 8000abe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ac2:	0c20      	lsrs	r0, r4, #16
 8000ac4:	fa1f fe8c 	uxth.w	lr, ip
 8000ac8:	fb09 1118 	mls	r1, r9, r8, r1
 8000acc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ad0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	fa02 f206 	lsl.w	r2, r2, r6
 8000ada:	d90b      	bls.n	8000af4 <__udivmoddi4+0x1b8>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ae4:	f080 8088 	bcs.w	8000bf8 <__udivmoddi4+0x2bc>
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f240 8085 	bls.w	8000bf8 <__udivmoddi4+0x2bc>
 8000aee:	f1a8 0802 	sub.w	r8, r8, #2
 8000af2:	4461      	add	r1, ip
 8000af4:	1a09      	subs	r1, r1, r0
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000afc:	fb09 1110 	mls	r1, r9, r0, r1
 8000b00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	458e      	cmp	lr, r1
 8000b0a:	d908      	bls.n	8000b1e <__udivmoddi4+0x1e2>
 8000b0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b14:	d26c      	bcs.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b16:	458e      	cmp	lr, r1
 8000b18:	d96a      	bls.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	4461      	add	r1, ip
 8000b1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b22:	fba0 9402 	umull	r9, r4, r0, r2
 8000b26:	eba1 010e 	sub.w	r1, r1, lr
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	46c8      	mov	r8, r9
 8000b2e:	46a6      	mov	lr, r4
 8000b30:	d356      	bcc.n	8000be0 <__udivmoddi4+0x2a4>
 8000b32:	d053      	beq.n	8000bdc <__udivmoddi4+0x2a0>
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x212>
 8000b36:	ebb3 0208 	subs.w	r2, r3, r8
 8000b3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b42:	fa22 f306 	lsr.w	r3, r2, r6
 8000b46:	40f1      	lsrs	r1, r6
 8000b48:	431f      	orrs	r7, r3
 8000b4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b4e:	2600      	movs	r6, #0
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	fa21 f303 	lsr.w	r3, r1, r3
 8000b64:	4091      	lsls	r1, r2
 8000b66:	4301      	orrs	r1, r0
 8000b68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b74:	fb07 3610 	mls	r6, r7, r0, r3
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b82:	429e      	cmp	r6, r3
 8000b84:	fa04 f402 	lsl.w	r4, r4, r2
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x260>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b92:	d22f      	bcs.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b94:	429e      	cmp	r6, r3
 8000b96:	d92d      	bls.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	b289      	uxth	r1, r1
 8000ba0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ba4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ba8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bac:	fb06 f30e 	mul.w	r3, r6, lr
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x28a>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bbc:	d216      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d914      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000bc2:	3e02      	subs	r6, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	1ac9      	subs	r1, r1, r3
 8000bc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bcc:	e738      	b.n	8000a40 <__udivmoddi4+0x104>
 8000bce:	462e      	mov	r6, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e705      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	e6e3      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bd8:	4618      	mov	r0, r3
 8000bda:	e6f8      	b.n	80009ce <__udivmoddi4+0x92>
 8000bdc:	454b      	cmp	r3, r9
 8000bde:	d2a9      	bcs.n	8000b34 <__udivmoddi4+0x1f8>
 8000be0:	ebb9 0802 	subs.w	r8, r9, r2
 8000be4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be8:	3801      	subs	r0, #1
 8000bea:	e7a3      	b.n	8000b34 <__udivmoddi4+0x1f8>
 8000bec:	4646      	mov	r6, r8
 8000bee:	e7ea      	b.n	8000bc6 <__udivmoddi4+0x28a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	e794      	b.n	8000b1e <__udivmoddi4+0x1e2>
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	e7d1      	b.n	8000b9c <__udivmoddi4+0x260>
 8000bf8:	46d0      	mov	r8, sl
 8000bfa:	e77b      	b.n	8000af4 <__udivmoddi4+0x1b8>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	e732      	b.n	8000a68 <__udivmoddi4+0x12c>
 8000c02:	4630      	mov	r0, r6
 8000c04:	e709      	b.n	8000a1a <__udivmoddi4+0xde>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	e742      	b.n	8000a92 <__udivmoddi4+0x156>

08000c0c <__aeabi_idiv0>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c24:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <MX_ADC1_Init+0xa0>)
 8000c26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c54:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c76:	f001 faf9 	bl	800226c <HAL_ADC_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000c80:	f000 fef0 	bl	8001a64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c84:	230a      	movs	r3, #10
 8000c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c90:	463b      	mov	r3, r7
 8000c92:	4619      	mov	r1, r3
 8000c94:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_ADC1_Init+0x9c>)
 8000c96:	f001 fc1d 	bl	80024d4 <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000ca0:	f000 fee0 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	40012000 	.word	0x40012000

08000cb4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a34      	ldr	r2, [pc, #208]	; (8000da4 <HAL_ADC_MspInit+0xf0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d162      	bne.n	8000d9c <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b33      	ldr	r3, [pc, #204]	; (8000da8 <HAL_ADC_MspInit+0xf4>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a32      	ldr	r2, [pc, #200]	; (8000da8 <HAL_ADC_MspInit+0xf4>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_ADC_MspInit+0xf4>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <HAL_ADC_MspInit+0xf4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a2b      	ldr	r2, [pc, #172]	; (8000da8 <HAL_ADC_MspInit+0xf4>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_ADC_MspInit+0xf4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d12:	2303      	movs	r3, #3
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4822      	ldr	r0, [pc, #136]	; (8000dac <HAL_ADC_MspInit+0xf8>)
 8000d22:	f002 fb9b 	bl	800345c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d26:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d28:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <HAL_ADC_MspInit+0x100>)
 8000d2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d46:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d5e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d72:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000d76:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_INC4;
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d82:	f001 ff69 	bl	8002c58 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8000d8c:	f000 fe6a 	bl	8001a64 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
 8000d96:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_ADC_MspInit+0xfc>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40012000 	.word	0x40012000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020800 	.word	0x40020800
 8000db0:	200000e0 	.word	0x200000e0
 8000db4:	40026410 	.word	0x40026410

08000db8 <Audio_Init>:
#define FLOAT_TO_INT 65536.0f

extern struct Effect effects;

void Audio_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0


	//INITIAL EFFECTS PARAMS
	effects.delay_on = 0;
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <Audio_Init+0x8c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
	effects.trem_on = 1;
 8000dc2:	4b20      	ldr	r3, [pc, #128]	; (8000e44 <Audio_Init+0x8c>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
	effects.od_on = 0;
 8000dc8:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <Audio_Init+0x8c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
	effects.dt = 50;
 8000dce:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <Audio_Init+0x8c>)
 8000dd0:	2232      	movs	r2, #50	; 0x32
 8000dd2:	60da      	str	r2, [r3, #12]
	effects.df = 50;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <Audio_Init+0x8c>)
 8000dd6:	2232      	movs	r2, #50	; 0x32
 8000dd8:	611a      	str	r2, [r3, #16]
	effects.tr = 10;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <Audio_Init+0x8c>)
 8000ddc:	220a      	movs	r2, #10
 8000dde:	615a      	str	r2, [r3, #20]
	effects.td = 40;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <Audio_Init+0x8c>)
 8000de2:	2228      	movs	r2, #40	; 0x28
 8000de4:	619a      	str	r2, [r3, #24]

	tremolo_init(40.0f, 6.0f, 4*44108.0f);
 8000de6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000e48 <Audio_Init+0x90>
 8000dea:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000dee:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000e4c <Audio_Init+0x94>
 8000df2:	f000 ffd5 	bl	8001da0 <tremolo_init>
	tremolo_set_rate(effects.tr);
 8000df6:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <Audio_Init+0x8c>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e02:	eeb0 0a67 	vmov.f32	s0, s15
 8000e06:	f001 f831 	bl	8001e6c <tremolo_set_rate>
	tremolo_set_depth(effects.td);
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <Audio_Init+0x8c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e16:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1a:	f000 ffed 	bl	8001df8 <tremolo_set_depth>

	delay_init(); // init number of samples in half a second 28k works
 8000e1e:	f000 f95d 	bl	80010dc <delay_init>
	delay_update_fb_gain(effects.df);
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <Audio_Init+0x8c>)
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f99c 	bl	8001164 <delay_update_fb_gain>

	HAL_TIM_Base_Start(&htim2);
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <Audio_Init+0x98>)
 8000e2e:	f004 f833 	bl	8004e98 <HAL_TIM_Base_Start>
	HAL_I2S_Transmit_DMA(&hi2s3,(uint16_t*)audioOutBuffer,2*2*BUFFER_SIZE);
 8000e32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e36:	4907      	ldr	r1, [pc, #28]	; (8000e54 <Audio_Init+0x9c>)
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <Audio_Init+0xa0>)
 8000e3a:	f002 fded 	bl	8003a18 <HAL_I2S_Transmit_DMA>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20003210 	.word	0x20003210
 8000e48:	482c4c00 	.word	0x482c4c00
 8000e4c:	42200000 	.word	0x42200000
 8000e50:	20003230 	.word	0x20003230
 8000e54:	20001140 	.word	0x20001140
 8000e58:	20003160 	.word	0x20003160

08000e5c <Audio_Step>:

void Audio_Step(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
		/* Wait for half transfer to complete */
		while(i2s_half == 0U);
 8000e62:	bf00      	nop
 8000e64:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <Audio_Step+0x18c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0fb      	beq.n	8000e64 <Audio_Step+0x8>
		i2s_half = 0U;
 8000e6c:	4b5e      	ldr	r3, [pc, #376]	; (8000fe8 <Audio_Step+0x18c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]

		// First half of the buffer
		for(int i = 0 ; i<BUFFER_SIZE; ++i)
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	e04c      	b.n	8000f12 <Audio_Step+0xb6>
		{
			float floatSample = INT_TO_FLOAT * (audioInBuffer[i] << 3);
 8000e78:	4a5c      	ldr	r2, [pc, #368]	; (8000fec <Audio_Step+0x190>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8000ff0 <Audio_Step+0x194>
 8000e90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e94:	edc7 7a02 	vstr	s15, [r7, #8]

			/* process data */
			if (effects.od_on) {
 8000e98:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <Audio_Step+0x198>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <Audio_Step+0x50>
				floatSample = distort(floatSample);
 8000ea0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ea4:	f000 f9fe 	bl	80012a4 <distort>
 8000ea8:	ed87 0a02 	vstr	s0, [r7, #8]
			}
			if (effects.trem_on) {
 8000eac:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <Audio_Step+0x198>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d005      	beq.n	8000ec0 <Audio_Step+0x64>
				floatSample = tremolo_update(floatSample);
 8000eb4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000eb8:	f001 f85e 	bl	8001f78 <tremolo_update>
 8000ebc:	ed87 0a02 	vstr	s0, [r7, #8]
			}
			if (effects.delay_on) {
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <Audio_Step+0x198>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <Audio_Step+0x78>
				floatSample = delay_apply(floatSample);
 8000ec8:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ecc:	f000 f9b8 	bl	8001240 <delay_apply>
 8000ed0:	ed87 0a02 	vstr	s0, [r7, #8]
			}

			audioOutBuffer[2*i] = FLOAT_TO_INT * floatSample;
 8000ed4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ed8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000ff8 <Audio_Step+0x19c>
 8000edc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ee8:	ee17 2a90 	vmov	r2, s15
 8000eec:	b291      	uxth	r1, r2
 8000eee:	4a43      	ldr	r2, [pc, #268]	; (8000ffc <Audio_Step+0x1a0>)
 8000ef0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			audioOutBuffer[2*i+1] = audioOutBuffer[2*i];
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	005a      	lsls	r2, r3, #1
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	3301      	adds	r3, #1
 8000efe:	493f      	ldr	r1, [pc, #252]	; (8000ffc <Audio_Step+0x1a0>)
 8000f00:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f04:	b291      	uxth	r1, r2
 8000f06:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <Audio_Step+0x1a0>)
 8000f08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0 ; i<BUFFER_SIZE; ++i)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f18:	d3ae      	bcc.n	8000e78 <Audio_Step+0x1c>
		}

		// Wait for full i2s transfer
		while(i2s_full == 0U);
 8000f1a:	bf00      	nop
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <Audio_Step+0x1a4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0fb      	beq.n	8000f1c <Audio_Step+0xc0>
		while(i2s_full == 0U);
 8000f24:	bf00      	nop
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <Audio_Step+0x1a4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0fb      	beq.n	8000f26 <Audio_Step+0xca>
		i2s_full = 0U;
 8000f2e:	4b34      	ldr	r3, [pc, #208]	; (8001000 <Audio_Step+0x1a4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

		// Second half of the buffer
		for(int i = BUFFER_SIZE; i<2*BUFFER_SIZE; ++i)
 8000f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f38:	607b      	str	r3, [r7, #4]
 8000f3a:	e04c      	b.n	8000fd6 <Audio_Step+0x17a>
		{

			float floatSample = INT_TO_FLOAT * (audioInBuffer[i] << 3);
 8000f3c:	4a2b      	ldr	r2, [pc, #172]	; (8000fec <Audio_Step+0x190>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f50:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000ff0 <Audio_Step+0x194>
 8000f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f58:	edc7 7a00 	vstr	s15, [r7]

			/* process data */
			if (effects.od_on) {
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <Audio_Step+0x198>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d005      	beq.n	8000f70 <Audio_Step+0x114>
				floatSample = distort(floatSample);
 8000f64:	ed97 0a00 	vldr	s0, [r7]
 8000f68:	f000 f99c 	bl	80012a4 <distort>
 8000f6c:	ed87 0a00 	vstr	s0, [r7]
			}
			if (effects.trem_on) {
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <Audio_Step+0x198>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <Audio_Step+0x128>
				floatSample = tremolo_update(floatSample);
 8000f78:	ed97 0a00 	vldr	s0, [r7]
 8000f7c:	f000 fffc 	bl	8001f78 <tremolo_update>
 8000f80:	ed87 0a00 	vstr	s0, [r7]
			}
			if (effects.delay_on) {
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <Audio_Step+0x198>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <Audio_Step+0x13c>
				floatSample = delay_apply(floatSample);
 8000f8c:	ed97 0a00 	vldr	s0, [r7]
 8000f90:	f000 f956 	bl	8001240 <delay_apply>
 8000f94:	ed87 0a00 	vstr	s0, [r7]
			}

			audioOutBuffer[2*i] = FLOAT_TO_INT * floatSample;
 8000f98:	edd7 7a00 	vldr	s15, [r7]
 8000f9c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000ff8 <Audio_Step+0x19c>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fac:	ee17 2a90 	vmov	r2, s15
 8000fb0:	b291      	uxth	r1, r2
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <Audio_Step+0x1a0>)
 8000fb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			audioOutBuffer[2*i+1] = audioOutBuffer[2*i];
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	005a      	lsls	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <Audio_Step+0x1a0>)
 8000fc4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fc8:	b291      	uxth	r1, r2
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <Audio_Step+0x1a0>)
 8000fcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = BUFFER_SIZE; i<2*BUFFER_SIZE; ++i)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fdc:	d3ae      	bcc.n	8000f3c <Audio_Step+0xe0>
		}

}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20003140 	.word	0x20003140
 8000fec:	20000140 	.word	0x20000140
 8000ff0:	37800000 	.word	0x37800000
 8000ff4:	20003210 	.word	0x20003210
 8000ff8:	47800000 	.word	0x47800000
 8000ffc:	20001140 	.word	0x20001140
 8001000:	20003144 	.word	0x20003144

08001004 <HAL_ADC_ConvHalfCpltCallback>:


void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	adc_half = 1U;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20003148 	.word	0x20003148

08001024 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	adc_full = 1U;
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_ADC_ConvCpltCallback+0x1c>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	2000314c 	.word	0x2000314c

08001044 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	i2s_half = 1U;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_I2S_TxHalfCpltCallback+0x24>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)audioInBuffer, BUFFER_SIZE);
 8001052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001056:	4905      	ldr	r1, [pc, #20]	; (800106c <HAL_I2S_TxHalfCpltCallback+0x28>)
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_I2S_TxHalfCpltCallback+0x2c>)
 800105a:	f001 f94b 	bl	80022f4 <HAL_ADC_Start_DMA>

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20003140 	.word	0x20003140
 800106c:	20000140 	.word	0x20000140
 8001070:	20000098 	.word	0x20000098

08001074 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	i2s_full = 1U;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_I2S_TxCpltCallback+0x24>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)(audioInBuffer + BUFFER_SIZE), BUFFER_SIZE);
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_I2S_TxCpltCallback+0x28>)
 8001084:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001088:	4619      	mov	r1, r3
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <HAL_I2S_TxCpltCallback+0x2c>)
 800108c:	f001 f932 	bl	80022f4 <HAL_ADC_Start_DMA>

}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20003144 	.word	0x20003144
 800109c:	20000940 	.word	0x20000940
 80010a0:	20000098 	.word	0x20000098

080010a4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	printf("ADC Error\n");
 80010ac:	4803      	ldr	r0, [pc, #12]	; (80010bc <HAL_ADC_ErrorCallback+0x18>)
 80010ae:	f005 fa6f 	bl	8006590 <puts>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	08007654 	.word	0x08007654

080010c0 <HAL_I2S_ErrorCallback>:

/* Error callback for I2S and I2C */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	printf("I2S Error\r\n");
 80010c8:	4803      	ldr	r0, [pc, #12]	; (80010d8 <HAL_I2S_ErrorCallback+0x18>)
 80010ca:	f005 fa61 	bl	8006590 <puts>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	08007660 	.word	0x08007660

080010dc <delay_init>:
int readIndex, writeIndex;
float fb_gain;


void delay_init()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	delay_buffer = (float*)calloc(DELAY_LENGTH, sizeof(float));
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <delay_init+0x2c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2104      	movs	r1, #4
 80010e6:	4618      	mov	r0, r3
 80010e8:	f005 f900 	bl	80062ec <calloc>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <delay_init+0x30>)
 80010f2:	601a      	str	r2, [r3, #0]

	readIndex = 0;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <delay_init+0x34>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
	writeIndex = DELAY_LENGTH - 2;
 80010fa:	4b03      	ldr	r3, [pc, #12]	; (8001108 <delay_init+0x2c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3b02      	subs	r3, #2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <delay_init+0x38>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000000 	.word	0x20000000
 800110c:	20003150 	.word	0x20003150
 8001110:	20003154 	.word	0x20003154
 8001114:	20003158 	.word	0x20003158

08001118 <delay_update_time>:

void delay_update_time(int percent)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	int step = 250;
 8001120:	23fa      	movs	r3, #250	; 0xfa
 8001122:	60fb      	str	r3, [r7, #12]
	// set delay length between 4000 and DELAY_LEnGTH
	DELAY_LENGTH = MIN_DELAY + step * percent;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	fb03 f202 	mul.w	r2, r3, r2
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <delay_update_time+0x3c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4413      	add	r3, r2
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <delay_update_time+0x40>)
 8001134:	6013      	str	r3, [r2, #0]
	// Reset indexes in order not to access invalid memory zones.
	readIndex = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <delay_update_time+0x44>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
	writeIndex = DELAY_LENGTH - 2;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <delay_update_time+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3b02      	subs	r3, #2
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <delay_update_time+0x48>)
 8001144:	6013      	str	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000004 	.word	0x20000004
 8001158:	20000000 	.word	0x20000000
 800115c:	20003154 	.word	0x20003154
 8001160:	20003158 	.word	0x20003158

08001164 <delay_update_fb_gain>:

void delay_update_fb_gain(int percent)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	// set gain from 1 to 100
	fb_gain = percent * 0.01f;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001176:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001190 <delay_update_fb_gain+0x2c>
 800117a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <delay_update_fb_gain+0x30>)
 8001180:	edc3 7a00 	vstr	s15, [r3]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	3c23d70a 	.word	0x3c23d70a
 8001194:	2000315c 	.word	0x2000315c

08001198 <delay_read_last>:

float delay_read_last(float x)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	ed87 0a01 	vstr	s0, [r7, #4]
    float ret = delay_buffer[readIndex];
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <delay_read_last+0x4c>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <delay_read_last+0x50>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
    ++readIndex;
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <delay_read_last+0x50>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <delay_read_last+0x50>)
 80011ba:	6013      	str	r3, [r2, #0]
    if(readIndex >= DELAY_LENGTH)
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <delay_read_last+0x50>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <delay_read_last+0x54>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	db02      	blt.n	80011ce <delay_read_last+0x36>
        readIndex = 0;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <delay_read_last+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
    return ret;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	ee07 3a90 	vmov	s15, r3
}
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20003150 	.word	0x20003150
 80011e8:	20003154 	.word	0x20003154
 80011ec:	20000000 	.word	0x20000000

080011f0 <delay_write_next>:

void delay_write_next(float x)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	ed87 0a01 	vstr	s0, [r7, #4]
	delay_buffer[writeIndex] = x;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <delay_write_next+0x44>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <delay_write_next+0x48>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
    ++writeIndex;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <delay_write_next+0x48>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <delay_write_next+0x48>)
 8001212:	6013      	str	r3, [r2, #0]
    if(writeIndex >= DELAY_LENGTH)
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <delay_write_next+0x48>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <delay_write_next+0x4c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	429a      	cmp	r2, r3
 800121e:	db02      	blt.n	8001226 <delay_write_next+0x36>
        writeIndex = 0;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <delay_write_next+0x48>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20003150 	.word	0x20003150
 8001238:	20003158 	.word	0x20003158
 800123c:	20000000 	.word	0x20000000

08001240 <delay_apply>:

float delay_apply(float x) {
 8001240:	b580      	push	{r7, lr}
 8001242:	ed2d 8b02 	vpush	{d8}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	ed87 0a01 	vstr	s0, [r7, #4]
	float ret = (1-fb_gain) * x + fb_gain * delay_read_last(x);
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <delay_apply+0x60>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001260:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001264:	ed97 0a01 	vldr	s0, [r7, #4]
 8001268:	f7ff ff96 	bl	8001198 <delay_read_last>
 800126c:	eeb0 7a40 	vmov.f32	s14, s0
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <delay_apply+0x60>)
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800127e:	edc7 7a03 	vstr	s15, [r7, #12]
	delay_write_next(ret);
 8001282:	ed97 0a03 	vldr	s0, [r7, #12]
 8001286:	f7ff ffb3 	bl	80011f0 <delay_write_next>
	return ret;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	ee07 3a90 	vmov	s15, r3
}
 8001290:	eeb0 0a67 	vmov.f32	s0, s15
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	ecbd 8b02 	vpop	{d8}
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000315c 	.word	0x2000315c

080012a4 <distort>:
#include "distortion.h"

float distort(float initialSample)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	ed87 0a01 	vstr	s0, [r7, #4]
	initialSample -= 0.5f; // center in 0
 80012ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80012b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ba:	edc7 7a01 	vstr	s15, [r7, #4]
	initialSample *= 2.5f; // amplify by 2.5
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80012c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ca:	edc7 7a01 	vstr	s15, [r7, #4]

	float processedSample = initialSample;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

	if(abs(initialSample) > 0.1f)
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fa72 	bl	80007bc <__aeabi_f2d>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	ec43 2b10 	vmov	d0, r2, r3
 80012e0:	f004 fffc 	bl	80062dc <abs>
 80012e4:	ee07 0a90 	vmov	s15, r0
 80012e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001370 <distort+0xcc>
 80012f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f8:	dd06      	ble.n	8001308 <distort+0x64>
		processedSample *= 2.0f;
 80012fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001302:	edc7 7a03 	vstr	s15, [r7, #12]
 8001306:	e012      	b.n	800132e <distort+0x8a>
	else
	{
		processedSample = initialSample * initialSample;
 8001308:	edd7 7a01 	vldr	s15, [r7, #4]
 800130c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001310:	edc7 7a03 	vstr	s15, [r7, #12]
	    if(initialSample < 0.f)
 8001314:	edd7 7a01 	vldr	s15, [r7, #4]
 8001318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d505      	bpl.n	800132e <distort+0x8a>
	    	processedSample = -processedSample;
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	eef1 7a67 	vneg.f32	s15, s15
 800132a:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	if(processedSample > 0.45f)
 800132e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001332:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001374 <distort+0xd0>
 8001336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	dd01      	ble.n	8001344 <distort+0xa0>
		processedSample = 0.45f;
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <distort+0xd4>)
 8001342:	60fb      	str	r3, [r7, #12]
	if(processedSample < -0.45f)
 8001344:	edd7 7a03 	vldr	s15, [r7, #12]
 8001348:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800137c <distort+0xd8>
 800134c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001354:	d501      	bpl.n	800135a <distort+0xb6>
		processedSample = -0.45f;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <distort+0xdc>)
 8001358:	60fb      	str	r3, [r7, #12]

	return processedSample + 0.5; // shift back to range (0,1)
 800135a:	edd7 7a03 	vldr	s15, [r7, #12]
 800135e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001362:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	3dcccccd 	.word	0x3dcccccd
 8001374:	3ee66666 	.word	0x3ee66666
 8001378:	3ee66666 	.word	0x3ee66666
 800137c:	bee66666 	.word	0xbee66666
 8001380:	bee66666 	.word	0xbee66666

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b17      	ldr	r3, [pc, #92]	; (80013ec <MX_DMA_Init+0x68>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <MX_DMA_Init+0x68>)
 8001394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_DMA_Init+0x68>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_DMA_Init+0x68>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_DMA_Init+0x68>)
 80013b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_DMA_Init+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2010      	movs	r0, #16
 80013c8:	f001 fc0f 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013cc:	2010      	movs	r0, #16
 80013ce:	f001 fc28 	bl	8002c22 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2100      	movs	r1, #0
 80013d6:	2038      	movs	r0, #56	; 0x38
 80013d8:	f001 fc07 	bl	8002bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013dc:	2038      	movs	r0, #56	; 0x38
 80013de:	f001 fc20 	bl	8002c22 <HAL_NVIC_EnableIRQ>

}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_GPIO_Init+0xb4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a25      	ldr	r2, [pc, #148]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <MX_GPIO_Init+0xb4>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	; (80014a4 <MX_GPIO_Init+0xb4>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_GPIO_Init+0xb4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2120      	movs	r1, #32
 800147a:	480b      	ldr	r0, [pc, #44]	; (80014a8 <MX_GPIO_Init+0xb8>)
 800147c:	f002 f972 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001480:	2320      	movs	r3, #32
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_GPIO_Init+0xb8>)
 8001498:	f001 ffe0 	bl	800345c <HAL_GPIO_Init>

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	; 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <MX_I2S3_Init+0x54>)
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <MX_I2S3_Init+0x58>)
 80014b4:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014b6:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2S3_Init+0x54>)
 80014b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014bc:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_I2S3_Init+0x54>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_I2S3_Init+0x54>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <MX_I2S3_Init+0x54>)
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_I2S3_Init+0x54>)
 80014d4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80014d8:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_I2S3_Init+0x54>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_I2S3_Init+0x54>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_I2S3_Init+0x54>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_I2S3_Init+0x54>)
 80014ee:	f002 f953 	bl	8003798 <HAL_I2S_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2S3_Init+0x50>
		Error_Handler();
 80014f8:	f000 fab4 	bl	8001a64 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20003160 	.word	0x20003160
 8001504:	40003c00 	.word	0x40003c00

08001508 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef *i2sHandle) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b092      	sub	sp, #72	; 0x48
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
 8001530:	615a      	str	r2, [r3, #20]
	if (i2sHandle->Instance == SPI3) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a60      	ldr	r2, [pc, #384]	; (80016b8 <HAL_I2S_MspInit+0x1b0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	f040 80b9 	bne.w	80016b0 <HAL_I2S_MspInit+0x1a8>

		/* USER CODE END SPI3_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
		PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 8001542:	f240 130f 	movw	r3, #271	; 0x10f
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
		PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8001548:	2310      	movs	r3, #16
 800154a:	623b      	str	r3, [r7, #32]
		PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800154c:	2302      	movs	r3, #2
 800154e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001550:	f107 031c 	add.w	r3, r7, #28
 8001554:	4618      	mov	r0, r3
 8001556:	f003 faff 	bl	8004b58 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_I2S_MspInit+0x5c>
			Error_Handler();
 8001560:	f000 fa80 	bl	8001a64 <Error_Handler>
		}

		/* I2S3 clock enable */
		__HAL_RCC_SPI3_CLK_ENABLE();
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
 8001568:	4b54      	ldr	r3, [pc, #336]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	4a53      	ldr	r2, [pc, #332]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 800156e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001572:	6413      	str	r3, [r2, #64]	; 0x40
 8001574:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	4a4c      	ldr	r2, [pc, #304]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6313      	str	r3, [r2, #48]	; 0x30
 8001590:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 8001592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	4b46      	ldr	r3, [pc, #280]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 80015a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a4:	4a45      	ldr	r2, [pc, #276]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	6313      	str	r3, [r2, #48]	; 0x30
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6313      	str	r3, [r2, #48]	; 0x30
 80015c8:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <HAL_I2S_MspInit+0x1b4>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]
		 PA4     ------> I2S3_WS
		 PB10     ------> I2S3_MCK
		 PC10     ------> I2S3_CK
		 PC12     ------> I2S3_SD
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015d4:	2310      	movs	r3, #16
 80015d6:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015e4:	2306      	movs	r3, #6
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ec:	4619      	mov	r1, r3
 80015ee:	4834      	ldr	r0, [pc, #208]	; (80016c0 <HAL_I2S_MspInit+0x1b8>)
 80015f0:	f001 ff34 	bl	800345c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001606:	2306      	movs	r3, #6
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800160e:	4619      	mov	r1, r3
 8001610:	482c      	ldr	r0, [pc, #176]	; (80016c4 <HAL_I2S_MspInit+0x1bc>)
 8001612:	f001 ff23 	bl	800345c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001616:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161a:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	643b      	str	r3, [r7, #64]	; 0x40
		GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001628:	2306      	movs	r3, #6
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001630:	4619      	mov	r1, r3
 8001632:	4825      	ldr	r0, [pc, #148]	; (80016c8 <HAL_I2S_MspInit+0x1c0>)
 8001634:	f001 ff12 	bl	800345c <HAL_GPIO_Init>

		/* I2S3 DMA Init */
		/* SPI3_TX Init */
		hdma_spi3_tx.Instance = DMA1_Stream5;
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_I2S_MspInit+0x1c8>)
 800163c:	601a      	str	r2, [r3, #0]
		hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
		hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001644:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	609a      	str	r2, [r3, #8]
		hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
		hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001650:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001656:	611a      	str	r2, [r3, #16]
		hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001658:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 800165a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165e:	615a      	str	r2, [r3, #20]
		hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001666:	619a      	str	r2, [r3, #24]
		hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 800166a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166e:	61da      	str	r2, [r3, #28]
		hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001672:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001676:	621a      	str	r2, [r3, #32]
		hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 800167a:	2204      	movs	r2, #4
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001680:	2201      	movs	r2, #1
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_spi3_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001686:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800168c:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 800168e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
		if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK) {
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 8001696:	f001 fadf 	bl	8002c58 <HAL_DMA_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_I2S_MspInit+0x19c>
			Error_Handler();
 80016a0:	f000 f9e0 	bl	8001a64 <Error_Handler>
		}

		__HAL_LINKDMA(i2sHandle, hdmatx, hdma_spi3_tx);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
 80016aa:	4a08      	ldr	r2, [pc, #32]	; (80016cc <HAL_I2S_MspInit+0x1c4>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6393      	str	r3, [r2, #56]	; 0x38

		/* USER CODE BEGIN SPI3_MspInit 1 */

		/* USER CODE END SPI3_MspInit 1 */
	}
}
 80016b0:	bf00      	nop
 80016b2:	3748      	adds	r7, #72	; 0x48
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40003c00 	.word	0x40003c00
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	200031a8 	.word	0x200031a8
 80016d0:	40026088 	.word	0x40026088

080016d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00b      	beq.n	8001714 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016fc:	e000      	b.n	8001700 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001700:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f9      	beq.n	80016fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800170a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len) {
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	int i = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len; i++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e009      	b.n	800174c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffc7 	bl	80016d4 <ITM_SendChar>
	for (i = 0; i < len; i++)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	3301      	adds	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
 800174c:	697a      	ldr	r2, [r7, #20]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	429a      	cmp	r2, r3
 8001752:	dbf1      	blt.n	8001738 <_write+0x16>
	return len;
 8001754:	687b      	ldr	r3, [r7, #4]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2120      	movs	r1, #32
 800176c:	486b      	ldr	r0, [pc, #428]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 800176e:	f001 fff9 	bl	8003764 <HAL_GPIO_WritePin>
	if (huart->Instance == huart1.Instance) {
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <HAL_UART_RxCpltCallback+0x1c0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	f040 80ca 	bne.w	8001914 <HAL_UART_RxCpltCallback+0x1b4>
		rxCharCount++;
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_UART_RxCpltCallback+0x1c4>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b66      	ldr	r3, [pc, #408]	; (8001924 <HAL_UART_RxCpltCallback+0x1c4>)
 800178a:	701a      	strb	r2, [r3, #0]
		if (rxCharCount >= 5)
 800178c:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_UART_RxCpltCallback+0x1c4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b04      	cmp	r3, #4
 8001792:	d902      	bls.n	800179a <HAL_UART_RxCpltCallback+0x3a>
			rxCharCount = 0;
 8001794:	4b63      	ldr	r3, [pc, #396]	; (8001924 <HAL_UART_RxCpltCallback+0x1c4>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, (uint8_t*) &bluetoothRxBuf[rxCharCount],
 800179a:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_UART_RxCpltCallback+0x1c4>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b61      	ldr	r3, [pc, #388]	; (8001928 <HAL_UART_RxCpltCallback+0x1c8>)
 80017a2:	4413      	add	r3, r2
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	485d      	ldr	r0, [pc, #372]	; (8001920 <HAL_UART_RxCpltCallback+0x1c0>)
 80017aa:	f003 fe6c 	bl	8005486 <HAL_UART_Receive_IT>
				1);

		if (rxCharCount == 0) {
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_UART_RxCpltCallback+0x1c4>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 80ae 	bne.w	8001914 <HAL_UART_RxCpltCallback+0x1b4>
			if (strcmp(bluetoothRxBuf, "delay") == 0) {
 80017b8:	495c      	ldr	r1, [pc, #368]	; (800192c <HAL_UART_RxCpltCallback+0x1cc>)
 80017ba:	485b      	ldr	r0, [pc, #364]	; (8001928 <HAL_UART_RxCpltCallback+0x1c8>)
 80017bc:	f7fe fd10 	bl	80001e0 <strcmp>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_UART_RxCpltCallback+0x86>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2120      	movs	r1, #32
 80017ca:	4854      	ldr	r0, [pc, #336]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 80017cc:	f001 ffca 	bl	8003764 <HAL_GPIO_WritePin>
				effects.delay_on = !effects.delay_on;
 80017d0:	4b57      	ldr	r3, [pc, #348]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e02c      	b.n	8001840 <HAL_UART_RxCpltCallback+0xe0>
			} else if (strcmp(bluetoothRxBuf, "tremo") == 0) {
 80017e6:	4953      	ldr	r1, [pc, #332]	; (8001934 <HAL_UART_RxCpltCallback+0x1d4>)
 80017e8:	484f      	ldr	r0, [pc, #316]	; (8001928 <HAL_UART_RxCpltCallback+0x1c8>)
 80017ea:	f7fe fcf9 	bl	80001e0 <strcmp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10f      	bne.n	8001814 <HAL_UART_RxCpltCallback+0xb4>
				effects.trem_on = !effects.trem_on;
 80017f4:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf0c      	ite	eq
 80017fc:	2301      	moveq	r3, #1
 80017fe:	2300      	movne	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 8001806:	605a      	str	r2, [r3, #4]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2120      	movs	r1, #32
 800180c:	4843      	ldr	r0, [pc, #268]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 800180e:	f001 ffa9 	bl	8003764 <HAL_GPIO_WritePin>
 8001812:	e015      	b.n	8001840 <HAL_UART_RxCpltCallback+0xe0>
			} else if (strcmp(bluetoothRxBuf, "dstrt") == 0) {
 8001814:	4948      	ldr	r1, [pc, #288]	; (8001938 <HAL_UART_RxCpltCallback+0x1d8>)
 8001816:	4844      	ldr	r0, [pc, #272]	; (8001928 <HAL_UART_RxCpltCallback+0x1c8>)
 8001818:	f7fe fce2 	bl	80001e0 <strcmp>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10e      	bne.n	8001840 <HAL_UART_RxCpltCallback+0xe0>
				effects.od_on = !effects.od_on;
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf0c      	ite	eq
 800182a:	2301      	moveq	r3, #1
 800182c:	2300      	movne	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	461a      	mov	r2, r3
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 8001834:	609a      	str	r2, [r3, #8]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	4838      	ldr	r0, [pc, #224]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 800183c:	f001 ff92 	bl	8003764 <HAL_GPIO_WritePin>
			}

			char* msgtok = strtok(bluetoothRxBuf, "=");
 8001840:	493e      	ldr	r1, [pc, #248]	; (800193c <HAL_UART_RxCpltCallback+0x1dc>)
 8001842:	4839      	ldr	r0, [pc, #228]	; (8001928 <HAL_UART_RxCpltCallback+0x1c8>)
 8001844:	f004 febc 	bl	80065c0 <strtok>
 8001848:	6178      	str	r0, [r7, #20]
			char* msgval = bluetoothRxBuf + 3;
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <HAL_UART_RxCpltCallback+0x1e0>)
 800184c:	613b      	str	r3, [r7, #16]
			int efval = atoi(msgval) + 1; // shifts range from 0-99 to 1-100
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f004 fd48 	bl	80062e4 <atoi>
 8001854:	4603      	mov	r3, r0
 8001856:	3301      	adds	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
			if (strcmp(msgtok, "dt") == 0) {
 800185a:	493a      	ldr	r1, [pc, #232]	; (8001944 <HAL_UART_RxCpltCallback+0x1e4>)
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7fe fcbf 	bl	80001e0 <strcmp>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_UART_RxCpltCallback+0x124>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2120      	movs	r1, #32
 800186c:	482b      	ldr	r0, [pc, #172]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 800186e:	f001 ff79 	bl	8003764 <HAL_GPIO_WritePin>
				effects.dt = efval;
 8001872:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	60d3      	str	r3, [r2, #12]
				delay_update_time(effects.dt);
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc4b 	bl	8001118 <delay_update_time>
				tremolo_set_depth(effects.td);
			}
		}

	}
}
 8001882:	e047      	b.n	8001914 <HAL_UART_RxCpltCallback+0x1b4>
			} else if (strcmp(msgtok, "df") == 0) {
 8001884:	4930      	ldr	r1, [pc, #192]	; (8001948 <HAL_UART_RxCpltCallback+0x1e8>)
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7fe fcaa 	bl	80001e0 <strcmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d10d      	bne.n	80018ae <HAL_UART_RxCpltCallback+0x14e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001892:	2200      	movs	r2, #0
 8001894:	2120      	movs	r1, #32
 8001896:	4821      	ldr	r0, [pc, #132]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 8001898:	f001 ff64 	bl	8003764 <HAL_GPIO_WritePin>
				effects.df = efval;
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6113      	str	r3, [r2, #16]
				delay_update_fb_gain(effects.df);
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc5c 	bl	8001164 <delay_update_fb_gain>
}
 80018ac:	e032      	b.n	8001914 <HAL_UART_RxCpltCallback+0x1b4>
			} else if (strcmp(msgtok, "tr") == 0) {
 80018ae:	4927      	ldr	r1, [pc, #156]	; (800194c <HAL_UART_RxCpltCallback+0x1ec>)
 80018b0:	6978      	ldr	r0, [r7, #20]
 80018b2:	f7fe fc95 	bl	80001e0 <strcmp>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d112      	bne.n	80018e2 <HAL_UART_RxCpltCallback+0x182>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	2120      	movs	r1, #32
 80018c0:	4816      	ldr	r0, [pc, #88]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 80018c2:	f001 ff4f 	bl	8003764 <HAL_GPIO_WritePin>
				effects.tr = efval;
 80018c6:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6153      	str	r3, [r2, #20]
				tremolo_set_rate(effects.tr);
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	f000 fac6 	bl	8001e6c <tremolo_set_rate>
}
 80018e0:	e018      	b.n	8001914 <HAL_UART_RxCpltCallback+0x1b4>
			} else if (strcmp(msgtok, "td") == 0) {
 80018e2:	491b      	ldr	r1, [pc, #108]	; (8001950 <HAL_UART_RxCpltCallback+0x1f0>)
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7fe fc7b 	bl	80001e0 <strcmp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d111      	bne.n	8001914 <HAL_UART_RxCpltCallback+0x1b4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2120      	movs	r1, #32
 80018f4:	4809      	ldr	r0, [pc, #36]	; (800191c <HAL_UART_RxCpltCallback+0x1bc>)
 80018f6:	f001 ff35 	bl	8003764 <HAL_GPIO_WritePin>
				effects.td = efval;
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6193      	str	r3, [r2, #24]
				tremolo_set_depth(effects.td);
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_UART_RxCpltCallback+0x1d0>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800190c:	eeb0 0a67 	vmov.f32	s0, s15
 8001910:	f000 fa72 	bl	8001df8 <tremolo_set_depth>
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40020000 	.word	0x40020000
 8001920:	20003290 	.word	0x20003290
 8001924:	2000320e 	.word	0x2000320e
 8001928:	20003208 	.word	0x20003208
 800192c:	0800766c 	.word	0x0800766c
 8001930:	20003210 	.word	0x20003210
 8001934:	08007674 	.word	0x08007674
 8001938:	0800767c 	.word	0x0800767c
 800193c:	08007684 	.word	0x08007684
 8001940:	2000320b 	.word	0x2000320b
 8001944:	08007688 	.word	0x08007688
 8001948:	0800768c 	.word	0x0800768c
 800194c:	08007690 	.word	0x08007690
 8001950:	08007694 	.word	0x08007694

08001954 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001958:	f000 fc16 	bl	8002188 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800195c:	f000 f81a 	bl	8001994 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001960:	f7ff fd46 	bl	80013f0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001964:	f7ff fd0e 	bl	8001384 <MX_DMA_Init>
	MX_I2S3_Init();
 8001968:	f7ff fda0 	bl	80014ac <MX_I2S3_Init>
	MX_ADC1_Init();
 800196c:	f7ff f950 	bl	8000c10 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001970:	f000 f9aa 	bl	8001cc8 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001974:	f000 fb64 	bl	8002040 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	// BT init
	HAL_UART_Receive_IT(&huart1, (uint8_t*) bluetoothRxBuf, 1);
 8001978:	2201      	movs	r2, #1
 800197a:	4904      	ldr	r1, [pc, #16]	; (800198c <main+0x38>)
 800197c:	4804      	ldr	r0, [pc, #16]	; (8001990 <main+0x3c>)
 800197e:	f003 fd82 	bl	8005486 <HAL_UART_Receive_IT>
	// HAL_UART_Receive_IT(&huart1,&rxData,1);
	Audio_Init();
 8001982:	f7ff fa19 	bl	8000db8 <Audio_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		Audio_Step();
 8001986:	f7ff fa69 	bl	8000e5c <Audio_Step>
 800198a:	e7fc      	b.n	8001986 <main+0x32>
 800198c:	20003208 	.word	0x20003208
 8001990:	20003290 	.word	0x20003290

08001994 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b094      	sub	sp, #80	; 0x50
 8001998:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800199a:	f107 0320 	add.w	r3, r7, #32
 800199e:	2230      	movs	r2, #48	; 0x30
 80019a0:	2100      	movs	r1, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 fcd4 	bl	8006350 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <SystemClock_Config+0xc8>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <SystemClock_Config+0xc8>)
 80019c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c6:	6413      	str	r3, [r2, #64]	; 0x40
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <SystemClock_Config+0xc8>)
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	2300      	movs	r3, #0
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <SystemClock_Config+0xcc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <SystemClock_Config+0xcc>)
 80019de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <SystemClock_Config+0xcc>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019f0:	2302      	movs	r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019f8:	2310      	movs	r3, #16
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fc:	2302      	movs	r3, #2
 80019fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a00:	2300      	movs	r3, #0
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001a04:	2308      	movs	r3, #8
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001a08:	2364      	movs	r3, #100	; 0x64
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a10:	2304      	movs	r3, #4
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fc45 	bl	80042a8 <HAL_RCC_OscConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x94>
		Error_Handler();
 8001a24:	f000 f81e 	bl	8001a64 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a28:	230f      	movs	r3, #15
 8001a2a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a38:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2103      	movs	r1, #3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 fea7 	bl	8004798 <HAL_RCC_ClockConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xc0>
		Error_Handler();
 8001a50:	f000 f808 	bl	8001a64 <Error_Handler>
	}
}
 8001a54:	bf00      	nop
 8001a56:	3750      	adds	r7, #80	; 0x50
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000

08001a64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_MspInit+0x4c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_MspInit+0x4c>)
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <HAL_MspInit+0x4c>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <NMI_Handler+0x4>

08001ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <BusFault_Handler+0x4>

08001ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <UsageFault_Handler+0x4>

08001ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0c:	f000 fb8e 	bl	800222c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <DMA1_Stream5_IRQHandler+0x10>)
 8001b1a:	f001 fa35 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200031a8 	.word	0x200031a8

08001b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <USART1_IRQHandler+0x10>)
 8001b2e:	f003 fcdb 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20003290 	.word	0x20003290

08001b3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA2_Stream0_IRQHandler+0x10>)
 8001b42:	f001 fa21 	bl	8002f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200000e0 	.word	0x200000e0

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
	return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:

int _kill(int pid, int sig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b6a:	f004 fbc7 	bl	80062fc <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2216      	movs	r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
	return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_exit>:

void _exit (int status)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b92:	e7fe      	b.n	8001b92 <_exit+0x12>

08001b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
	}

return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_close>:
	}
	return len;
}

int _close(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <_isatty>:

int _isatty(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	return 0;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c40:	4a14      	ldr	r2, [pc, #80]	; (8001c94 <_sbrk+0x5c>)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <_sbrk+0x60>)
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d102      	bne.n	8001c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <_sbrk+0x64>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <_sbrk+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d207      	bcs.n	8001c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c68:	f004 fb48 	bl	80062fc <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	220c      	movs	r2, #12
 8001c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e009      	b.n	8001c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	4a05      	ldr	r2, [pc, #20]	; (8001c9c <_sbrk+0x64>)
 8001c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20020000 	.word	0x20020000
 8001c98:	00000400 	.word	0x00000400
 8001c9c:	2000322c 	.word	0x2000322c
 8001ca0:	200032e8 	.word	0x200032e8

08001ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <SystemInit+0x20>)
 8001caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cae:	4a05      	ldr	r2, [pc, #20]	; (8001cc4 <SystemInit+0x20>)
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001ce6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1132;
 8001cf8:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001cfa:	f240 426c 	movw	r2, #1132	; 0x46c
 8001cfe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d0c:	4813      	ldr	r0, [pc, #76]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001d0e:	f003 f873 	bl	8004df8 <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d18:	f7ff fea4 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4619      	mov	r1, r3
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001d2a:	f003 f90f 	bl	8004f4c <HAL_TIM_ConfigClockSource>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d34:	f7ff fe96 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_TIM2_Init+0x94>)
 8001d46:	f003 fae3 	bl	8005310 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d50:	f7ff fe88 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20003230 	.word	0x20003230

08001d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d10d      	bne.n	8001d8e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <tremolo_init>:
float out;

float MIN_FREQ = 1;


void tremolo_init(float d, float lfo_freq_Hz, float samp_rate_Hz) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001daa:	edc7 0a02 	vstr	s1, [r7, #8]
 8001dae:	ed87 1a01 	vstr	s2, [r7, #4]
	tremolo_set_depth(d);
 8001db2:	ed97 0a03 	vldr	s0, [r7, #12]
 8001db6:	f000 f81f 	bl	8001df8 <tremolo_set_depth>

	sampleRate_Hz = samp_rate_Hz;
 8001dba:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <tremolo_init+0x48>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6013      	str	r3, [r2, #0]
	tremolo_set_LFO_frequency(lfo_freq_Hz);
 8001dc0:	ed97 0a02 	vldr	s0, [r7, #8]
 8001dc4:	f000 f870 	bl	8001ea8 <tremolo_set_LFO_frequency>

	lfoCount = 0;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <tremolo_init+0x4c>)
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
	lfoDir = COUNT_UP;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <tremolo_init+0x50>)
 8001dd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dd6:	601a      	str	r2, [r3, #0]

	out = 0.0f;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <tremolo_init+0x54>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20003288 	.word	0x20003288
 8001dec:	20003280 	.word	0x20003280
 8001df0:	2000327c 	.word	0x2000327c
 8001df4:	2000328c 	.word	0x2000328c

08001df8 <tremolo_set_depth>:

void tremolo_set_depth(float d) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	ed87 0a01 	vstr	s0, [r7, #4]
	d *= 0.01;
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7fe fcda 	bl	80007bc <__aeabi_f2d>
 8001e08:	a316      	add	r3, pc, #88	; (adr r3, 8001e64 <tremolo_set_depth+0x6c>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fa47 	bl	80002a0 <__aeabi_dmul>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f7fe fd27 	bl	800086c <__aeabi_d2f>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	607b      	str	r3, [r7, #4]

	if (d < 0.0f) {
 8001e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	d503      	bpl.n	8001e38 <tremolo_set_depth+0x40>
		d = 0.0f;
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	e00b      	b.n	8001e50 <tremolo_set_depth+0x58>
	} else if (d > 1.0f) {
 8001e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd02      	ble.n	8001e50 <tremolo_set_depth+0x58>
		d = 1.0f;
 8001e4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001e4e:	607b      	str	r3, [r7, #4]
	}

	depth = d;
 8001e50:	4a03      	ldr	r2, [pc, #12]	; (8001e60 <tremolo_set_depth+0x68>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20003278 	.word	0x20003278
 8001e64:	47ae147b 	.word	0x47ae147b
 8001e68:	3f847ae1 	.word	0x3f847ae1

08001e6c <tremolo_set_rate>:

void tremolo_set_rate(float rate) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	ed87 0a01 	vstr	s0, [r7, #4]
	float step = 0.59f;
 8001e76:	4b0a      	ldr	r3, [pc, #40]	; (8001ea0 <tremolo_set_rate+0x34>)
 8001e78:	60fb      	str	r3, [r7, #12]
	tremolo_set_LFO_frequency(MIN_FREQ + step * rate);
 8001e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <tremolo_set_rate+0x38>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	f000 f808 	bl	8001ea8 <tremolo_set_LFO_frequency>
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	3f170a3d 	.word	0x3f170a3d
 8001ea4:	2000000c 	.word	0x2000000c

08001ea8 <tremolo_set_LFO_frequency>:

void tremolo_set_LFO_frequency(float lfo_freq_Hz) {
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	ed87 0a01 	vstr	s0, [r7, #4]
	if (lfo_freq_Hz <= 0.0f) {
 8001eb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebe:	d803      	bhi.n	8001ec8 <tremolo_set_LFO_frequency+0x20>
		lfo_freq_Hz = 1.0f;
 8001ec0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	e016      	b.n	8001ef6 <tremolo_set_LFO_frequency+0x4e>
	} else if (lfo_freq_Hz > 0.5f * sampleRate_Hz) {
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <tremolo_set_LFO_frequency+0xc4>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ed2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	dd08      	ble.n	8001ef6 <tremolo_set_LFO_frequency+0x4e>
		lfo_freq_Hz = 0.5f * sampleRate_Hz;
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <tremolo_set_LFO_frequency+0xc4>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef2:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	MAX_LFO_COUNT = 0.25f *  (sampleRate_Hz / lfo_freq_Hz);
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <tremolo_set_LFO_frequency+0xc4>)
 8001ef8:	edd3 6a00 	vldr	s13, [r3]
 8001efc:	ed97 7a01 	vldr	s14, [r7, #4]
 8001f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f04:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001f08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <tremolo_set_LFO_frequency+0xc8>)
 8001f0e:	edc3 7a00 	vstr	s15, [r3]

	if (lfoCount > MAX_LFO_COUNT) {
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <tremolo_set_LFO_frequency+0xcc>)
 8001f14:	ed93 7a00 	vldr	s14, [r3]
 8001f18:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <tremolo_set_LFO_frequency+0xc8>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f26:	dd04      	ble.n	8001f32 <tremolo_set_LFO_frequency+0x8a>
		lfoCount = MAX_LFO_COUNT;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <tremolo_set_LFO_frequency+0xc8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <tremolo_set_LFO_frequency+0xcc>)
 8001f2e:	6013      	str	r3, [r2, #0]
	} else if (lfoCount < -MAX_LFO_COUNT) {
		lfoCount = -MAX_LFO_COUNT;
	}
}
 8001f30:	e015      	b.n	8001f5e <tremolo_set_LFO_frequency+0xb6>
	} else if (lfoCount < -MAX_LFO_COUNT) {
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <tremolo_set_LFO_frequency+0xc8>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	eeb1 7a67 	vneg.f32	s14, s15
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <tremolo_set_LFO_frequency+0xcc>)
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4a:	dc00      	bgt.n	8001f4e <tremolo_set_LFO_frequency+0xa6>
}
 8001f4c:	e007      	b.n	8001f5e <tremolo_set_LFO_frequency+0xb6>
		lfoCount = -MAX_LFO_COUNT;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <tremolo_set_LFO_frequency+0xc8>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eef1 7a67 	vneg.f32	s15, s15
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <tremolo_set_LFO_frequency+0xcc>)
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20003288 	.word	0x20003288
 8001f70:	20003284 	.word	0x20003284
 8001f74:	20003280 	.word	0x20003280

08001f78 <tremolo_update>:

float tremolo_update(float input) {
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	ed87 0a01 	vstr	s0, [r7, #4]

	/* output = input * ((1-depth) + depth * lfo[t]) */
	out = input * ((1.0f - depth) + depth * (lfoCount / MAX_LFO_COUNT));
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <tremolo_update+0xb0>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f90:	4b26      	ldr	r3, [pc, #152]	; (800202c <tremolo_update+0xb4>)
 8001f92:	ed93 6a00 	vldr	s12, [r3]
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <tremolo_update+0xb8>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <tremolo_update+0xb0>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	4b1f      	ldr	r3, [pc, #124]	; (8002034 <tremolo_update+0xbc>)
 8001fb8:	edc3 7a00 	vstr	s15, [r3]

	if (lfoCount >= MAX_LFO_COUNT) {
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <tremolo_update+0xb4>)
 8001fbe:	ed93 7a00 	vldr	s14, [r3]
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <tremolo_update+0xb8>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	db02      	blt.n	8001fd8 <tremolo_update+0x60>
		lfoDir = COUNT_DOWN;
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <tremolo_update+0xc0>)
 8001fd4:	4a19      	ldr	r2, [pc, #100]	; (800203c <tremolo_update+0xc4>)
 8001fd6:	601a      	str	r2, [r3, #0]
	}
	if (lfoCount <= -MAX_LFO_COUNT) {
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <tremolo_update+0xb8>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	eeb1 7a67 	vneg.f32	s14, s15
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <tremolo_update+0xb4>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	db03      	blt.n	8001ffa <tremolo_update+0x82>
		lfoDir = COUNT_UP;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <tremolo_update+0xc0>)
 8001ff4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ff8:	601a      	str	r2, [r3, #0]
	}

	lfoCount += lfoDir;
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <tremolo_update+0xb4>)
 8001ffc:	ed93 7a00 	vldr	s14, [r3]
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <tremolo_update+0xc0>)
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <tremolo_update+0xb4>)
 800200c:	edc3 7a00 	vstr	s15, [r3]

	return out;
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <tremolo_update+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	ee07 3a90 	vmov	s15, r3
}
 8002018:	eeb0 0a67 	vmov.f32	s0, s15
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20003278 	.word	0x20003278
 800202c:	20003280 	.word	0x20003280
 8002030:	20003284 	.word	0x20003284
 8002034:	2000328c 	.word	0x2000328c
 8002038:	2000327c 	.word	0x2000327c
 800203c:	bf800000 	.word	0xbf800000

08002040 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <MX_USART1_UART_Init+0x50>)
 8002048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800204c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_USART1_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_USART1_UART_Init+0x4c>)
 8002078:	f003 f9b8 	bl	80053ec <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002082:	f7ff fcef 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20003290 	.word	0x20003290
 8002090:	40011000 	.word	0x40011000

08002094 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08a      	sub	sp, #40	; 0x28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	; (8002128 <HAL_UART_MspInit+0x94>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d134      	bne.n	8002120 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_UART_MspInit+0x98>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	4a1b      	ldr	r2, [pc, #108]	; (800212c <HAL_UART_MspInit+0x98>)
 80020c0:	f043 0310 	orr.w	r3, r3, #16
 80020c4:	6453      	str	r3, [r2, #68]	; 0x44
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_UART_MspInit+0x98>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <HAL_UART_MspInit+0x98>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a14      	ldr	r2, [pc, #80]	; (800212c <HAL_UART_MspInit+0x98>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_UART_MspInit+0x98>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020fc:	2303      	movs	r3, #3
 80020fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002100:	2307      	movs	r3, #7
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	4619      	mov	r1, r3
 800210a:	4809      	ldr	r0, [pc, #36]	; (8002130 <HAL_UART_MspInit+0x9c>)
 800210c:	f001 f9a6 	bl	800345c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002110:	2200      	movs	r2, #0
 8002112:	2100      	movs	r1, #0
 8002114:	2025      	movs	r0, #37	; 0x25
 8002116:	f000 fd68 	bl	8002bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800211a:	2025      	movs	r0, #37	; 0x25
 800211c:	f000 fd81 	bl	8002c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	; 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40011000 	.word	0x40011000
 800212c:	40023800 	.word	0x40023800
 8002130:	40020000 	.word	0x40020000

08002134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002138:	480d      	ldr	r0, [pc, #52]	; (8002170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800213a:	490e      	ldr	r1, [pc, #56]	; (8002174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002150:	4c0b      	ldr	r4, [pc, #44]	; (8002180 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800215e:	f7ff fda1 	bl	8001ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f004 f8d1 	bl	8006308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002166:	f7ff fbf5 	bl	8001954 <main>
  bx  lr    
 800216a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800216c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002178:	08007914 	.word	0x08007914
  ldr r2, =_sbss
 800217c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002180:	200032e8 	.word	0x200032e8

08002184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC_IRQHandler>
	...

08002188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800218c:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <HAL_Init+0x40>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0d      	ldr	r2, [pc, #52]	; (80021c8 <HAL_Init+0x40>)
 8002192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_Init+0x40>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <HAL_Init+0x40>)
 800219e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <HAL_Init+0x40>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b0:	2003      	movs	r0, #3
 80021b2:	f000 fd0f 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b6:	200f      	movs	r0, #15
 80021b8:	f000 f808 	bl	80021cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021bc:	f7ff fc58 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023c00 	.word	0x40023c00

080021cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_InitTick+0x54>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_InitTick+0x58>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 fd27 	bl	8002c3e <HAL_SYSTICK_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e00e      	b.n	8002218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d80a      	bhi.n	8002216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002200:	2200      	movs	r2, #0
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f000 fcef 	bl	8002bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <HAL_InitTick+0x5c>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000008 	.word	0x20000008
 8002224:	20000014 	.word	0x20000014
 8002228:	20000010 	.word	0x20000010

0800222c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <HAL_IncTick+0x20>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_IncTick+0x24>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4413      	add	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_IncTick+0x24>)
 800223e:	6013      	str	r3, [r2, #0]
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	20000014 	.word	0x20000014
 8002250:	200032d4 	.word	0x200032d4

08002254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return uwTick;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <HAL_GetTick+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200032d4 	.word	0x200032d4

0800226c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e033      	b.n	80022ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fd12 	bl	8000cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b2:	f023 0302 	bic.w	r3, r3, #2
 80022b6:	f043 0202 	orr.w	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fa3a 	bl	8002738 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
 80022da:	e001      	b.n	80022e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start_DMA+0x1e>
 800230e:	2302      	movs	r3, #2
 8002310:	e0ce      	b.n	80024b0 <HAL_ADC_Start_DMA+0x1bc>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d018      	beq.n	800235a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002338:	4b5f      	ldr	r3, [pc, #380]	; (80024b8 <HAL_ADC_Start_DMA+0x1c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a5f      	ldr	r2, [pc, #380]	; (80024bc <HAL_ADC_Start_DMA+0x1c8>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9a      	lsrs	r2, r3, #18
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800234c:	e002      	b.n	8002354 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	3b01      	subs	r3, #1
 8002352:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002368:	d107      	bne.n	800237a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002378:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	f040 8086 	bne.w	8002496 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c8:	d106      	bne.n	80023d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f023 0206 	bic.w	r2, r3, #6
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
 80023d6:	e002      	b.n	80023de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023e6:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_ADC_Start_DMA+0x1cc>)
 80023e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ee:	4a35      	ldr	r2, [pc, #212]	; (80024c4 <HAL_ADC_Start_DMA+0x1d0>)
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <HAL_ADC_Start_DMA+0x1d4>)
 80023f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	4a33      	ldr	r2, [pc, #204]	; (80024cc <HAL_ADC_Start_DMA+0x1d8>)
 8002400:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800240a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800241a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	334c      	adds	r3, #76	; 0x4c
 8002436:	4619      	mov	r1, r3
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f000 fcba 	bl	8002db4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 031f 	and.w	r3, r3, #31
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10f      	bne.n	800246c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d129      	bne.n	80024ae <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	e020      	b.n	80024ae <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a17      	ldr	r2, [pc, #92]	; (80024d0 <HAL_ADC_Start_DMA+0x1dc>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11b      	bne.n	80024ae <HAL_ADC_Start_DMA+0x1ba>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d114      	bne.n	80024ae <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e00b      	b.n	80024ae <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000008 	.word	0x20000008
 80024bc:	431bde83 	.word	0x431bde83
 80024c0:	40012300 	.word	0x40012300
 80024c4:	08002931 	.word	0x08002931
 80024c8:	080029eb 	.word	0x080029eb
 80024cc:	08002a07 	.word	0x08002a07
 80024d0:	40012000 	.word	0x40012000

080024d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1c>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e113      	b.n	8002718 <HAL_ADC_ConfigChannel+0x244>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d925      	bls.n	800254c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68d9      	ldr	r1, [r3, #12]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	b29b      	uxth	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3b1e      	subs	r3, #30
 8002516:	2207      	movs	r2, #7
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43da      	mvns	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	400a      	ands	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68d9      	ldr	r1, [r3, #12]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	b29b      	uxth	r3, r3
 8002536:	4618      	mov	r0, r3
 8002538:	4603      	mov	r3, r0
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	4403      	add	r3, r0
 800253e:	3b1e      	subs	r3, #30
 8002540:	409a      	lsls	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	e022      	b.n	8002592 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	2207      	movs	r2, #7
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	400a      	ands	r2, r1
 800256e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6919      	ldr	r1, [r3, #16]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4618      	mov	r0, r3
 8002582:	4603      	mov	r3, r0
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4403      	add	r3, r0
 8002588:	409a      	lsls	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d824      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	3b05      	subs	r3, #5
 80025ac:	221f      	movs	r2, #31
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	4618      	mov	r0, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b05      	subs	r3, #5
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	; 0x34
 80025e2:	e04c      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	d824      	bhi.n	8002636 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	3b23      	subs	r3, #35	; 0x23
 80025fe:	221f      	movs	r2, #31
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43da      	mvns	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b29b      	uxth	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3b23      	subs	r3, #35	; 0x23
 8002628:	fa00 f203 	lsl.w	r2, r0, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
 8002634:	e023      	b.n	800267e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	3b41      	subs	r3, #65	; 0x41
 8002648:	221f      	movs	r2, #31
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	3b41      	subs	r3, #65	; 0x41
 8002672:	fa00 f203 	lsl.w	r2, r0, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267e:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_ADC_ConfigChannel+0x250>)
 8002680:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a28      	ldr	r2, [pc, #160]	; (8002728 <HAL_ADC_ConfigChannel+0x254>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10f      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1d8>
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b12      	cmp	r3, #18
 8002692:	d10b      	bne.n	80026ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1d      	ldr	r2, [pc, #116]	; (8002728 <HAL_ADC_ConfigChannel+0x254>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d12b      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <HAL_ADC_ConfigChannel+0x258>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d003      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x1f4>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b11      	cmp	r3, #17
 80026c6:	d122      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_ADC_ConfigChannel+0x258>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d111      	bne.n	800270e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_ADC_ConfigChannel+0x25c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a11      	ldr	r2, [pc, #68]	; (8002734 <HAL_ADC_ConfigChannel+0x260>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0c9a      	lsrs	r2, r3, #18
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002700:	e002      	b.n	8002708 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	3b01      	subs	r3, #1
 8002706:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f9      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40012300 	.word	0x40012300
 8002728:	40012000 	.word	0x40012000
 800272c:	10000012 	.word	0x10000012
 8002730:	20000008 	.word	0x20000008
 8002734:	431bde83 	.word	0x431bde83

08002738 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002740:	4b79      	ldr	r3, [pc, #484]	; (8002928 <ADC_Init+0x1f0>)
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800276c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002790:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6859      	ldr	r1, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689a      	ldr	r2, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6899      	ldr	r1, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68da      	ldr	r2, [r3, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ca:	4a58      	ldr	r2, [pc, #352]	; (800292c <ADC_Init+0x1f4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d022      	beq.n	8002816 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6899      	ldr	r1, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002800:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	e00f      	b.n	8002836 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002824:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002834:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0202 	bic.w	r2, r2, #2
 8002844:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6899      	ldr	r1, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002872:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002882:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	035a      	lsls	r2, r3, #13
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
 800289a:	e007      	b.n	80028ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	051a      	lsls	r2, r3, #20
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ee:	025a      	lsls	r2, r3, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	029a      	lsls	r2, r3, #10
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40012300 	.word	0x40012300
 800292c:	0f000001 	.word	0x0f000001

08002930 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d13c      	bne.n	80029c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d12b      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	d127      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d006      	beq.n	8002988 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002984:	2b00      	cmp	r3, #0
 8002986:	d119      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0220 	bic.w	r2, r2, #32
 8002996:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f7fe fb31 	bl	8001024 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029c2:	e00e      	b.n	80029e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7fe fb67 	bl	80010a4 <HAL_ADC_ErrorCallback>
}
 80029d6:	e004      	b.n	80029e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7fe fb03 	bl	8001004 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2240      	movs	r2, #64	; 0x40
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f043 0204 	orr.w	r2, r3, #4
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7fe fb3c 	bl	80010a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <__NVIC_SetPriorityGrouping>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a50:	4013      	ands	r3, r2
 8002a52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <__NVIC_SetPriorityGrouping+0x44>)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	60d3      	str	r3, [r2, #12]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_GetPriorityGrouping>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <__NVIC_GetPriorityGrouping+0x18>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	f003 0307 	and.w	r3, r3, #7
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	e000ed00 	.word	0xe000ed00

08002a98 <__NVIC_EnableIRQ>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	db0b      	blt.n	8002ac2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	f003 021f 	and.w	r2, r3, #31
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <__NVIC_EnableIRQ+0x38>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	2001      	movs	r0, #1
 8002aba:	fa00 f202 	lsl.w	r2, r0, r2
 8002abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000e100 	.word	0xe000e100

08002ad4 <__NVIC_SetPriority>:
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	4603      	mov	r3, r0
 8002adc:	6039      	str	r1, [r7, #0]
 8002ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db0a      	blt.n	8002afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	490c      	ldr	r1, [pc, #48]	; (8002b20 <__NVIC_SetPriority+0x4c>)
 8002aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	440b      	add	r3, r1
 8002af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002afc:	e00a      	b.n	8002b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	4908      	ldr	r1, [pc, #32]	; (8002b24 <__NVIC_SetPriority+0x50>)
 8002b04:	79fb      	ldrb	r3, [r7, #7]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	3b04      	subs	r3, #4
 8002b0c:	0112      	lsls	r2, r2, #4
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	440b      	add	r3, r1
 8002b12:	761a      	strb	r2, [r3, #24]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <NVIC_EncodePriority>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b089      	sub	sp, #36	; 0x24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f1c3 0307 	rsb	r3, r3, #7
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	bf28      	it	cs
 8002b46:	2304      	movcs	r3, #4
 8002b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2b06      	cmp	r3, #6
 8002b50:	d902      	bls.n	8002b58 <NVIC_EncodePriority+0x30>
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3b03      	subs	r3, #3
 8002b56:	e000      	b.n	8002b5a <NVIC_EncodePriority+0x32>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43da      	mvns	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b70:	f04f 31ff 	mov.w	r1, #4294967295
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	43d9      	mvns	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b80:	4313      	orrs	r3, r2
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <SysTick_Config>:
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f7ff ff8e 	bl	8002ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff29 	bl	8002a34 <__NVIC_SetPriorityGrouping>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bfc:	f7ff ff3e 	bl	8002a7c <__NVIC_GetPriorityGrouping>
 8002c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68b9      	ldr	r1, [r7, #8]
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff8e 	bl	8002b28 <NVIC_EncodePriority>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c12:	4611      	mov	r1, r2
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff5d 	bl	8002ad4 <__NVIC_SetPriority>
}
 8002c1a:	bf00      	nop
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	4603      	mov	r3, r0
 8002c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff31 	bl	8002a98 <__NVIC_EnableIRQ>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffa2 	bl	8002b90 <SysTick_Config>
 8002c4c:	4603      	mov	r3, r0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c64:	f7ff faf6 	bl	8002254 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e099      	b.n	8002da8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c94:	e00f      	b.n	8002cb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c96:	f7ff fadd 	bl	8002254 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d908      	bls.n	8002cb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2203      	movs	r2, #3
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e078      	b.n	8002da8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e8      	bne.n	8002c96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_DMA_Init+0x158>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d107      	bne.n	8002d20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f023 0307 	bic.w	r3, r3, #7
 8002d36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d117      	bne.n	8002d7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00e      	beq.n	8002d7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fb01 	bl	8003364 <DMA_CheckFifoParam>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d76:	2301      	movs	r3, #1
 8002d78:	e016      	b.n	8002da8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fab8 	bl	80032f8 <DMA_CalcBaseAndBitshift>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	223f      	movs	r2, #63	; 0x3f
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	f010803f 	.word	0xf010803f

08002db4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
 8002dc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_DMA_Start_IT+0x26>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e040      	b.n	8002e5c <HAL_DMA_Start_IT+0xa8>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d12f      	bne.n	8002e4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 fa4a 	bl	800329c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	223f      	movs	r2, #63	; 0x3f
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0216 	orr.w	r2, r2, #22
 8002e22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0208 	orr.w	r2, r2, #8
 8002e3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	e005      	b.n	8002e5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e72:	f7ff f9ef 	bl	8002254 <HAL_GetTick>
 8002e76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d008      	beq.n	8002e96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2280      	movs	r2, #128	; 0x80
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e052      	b.n	8002f3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_Abort+0x62>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee6:	e013      	b.n	8002f10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee8:	f7ff f9b4 	bl	8002254 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d90c      	bls.n	8002f10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2203      	movs	r2, #3
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e015      	b.n	8002f3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e4      	bne.n	8002ee8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	223f      	movs	r2, #63	; 0x3f
 8002f24:	409a      	lsls	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d004      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00c      	b.n	8002f7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2205      	movs	r2, #5
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f94:	4b8e      	ldr	r3, [pc, #568]	; (80031d0 <HAL_DMA_IRQHandler+0x248>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a8e      	ldr	r2, [pc, #568]	; (80031d4 <HAL_DMA_IRQHandler+0x24c>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	0a9b      	lsrs	r3, r3, #10
 8002fa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d013      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0204 	bic.w	r2, r2, #4
 8002fda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	409a      	lsls	r2, r3
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0201 	orr.w	r2, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	2201      	movs	r2, #1
 8003018:	409a      	lsls	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2204      	movs	r2, #4
 8003030:	409a      	lsls	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d012      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00b      	beq.n	8003060 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304c:	2204      	movs	r2, #4
 800304e:	409a      	lsls	r2, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003058:	f043 0204 	orr.w	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003064:	2210      	movs	r2, #16
 8003066:	409a      	lsls	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4013      	ands	r3, r2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d043      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03c      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2210      	movs	r2, #16
 8003084:	409a      	lsls	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d018      	beq.n	80030ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d108      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
 80030b6:	e01f      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0208 	bic.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	2220      	movs	r2, #32
 80030fe:	409a      	lsls	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 808f 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8087 	beq.w	8003228 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311e:	2220      	movs	r2, #32
 8003120:	409a      	lsls	r2, r3
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b05      	cmp	r3, #5
 8003130:	d136      	bne.n	80031a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0216 	bic.w	r2, r2, #22
 8003140:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003150:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <HAL_DMA_IRQHandler+0x1da>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	2b00      	cmp	r3, #0
 8003160:	d007      	beq.n	8003172 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0208 	bic.w	r2, r2, #8
 8003170:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	223f      	movs	r2, #63	; 0x3f
 8003178:	409a      	lsls	r2, r3
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	4798      	blx	r3
        }
        return;
 800319e:	e079      	b.n	8003294 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10d      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
 80031cc:	e02c      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
 80031ce:	bf00      	nop
 80031d0:	20000008 	.word	0x20000008
 80031d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d023      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	e01e      	b.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10f      	bne.n	8003218 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0210 	bic.w	r2, r2, #16
 8003206:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	2b00      	cmp	r3, #0
 800322e:	d032      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d022      	beq.n	8003282 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2205      	movs	r2, #5
 8003240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	3301      	adds	r3, #1
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	d307      	bcc.n	8003270 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f2      	bne.n	8003254 <HAL_DMA_IRQHandler+0x2cc>
 800326e:	e000      	b.n	8003272 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003270:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e000      	b.n	8003296 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003294:	bf00      	nop
    }
  }
}
 8003296:	3718      	adds	r7, #24
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d108      	bne.n	80032dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032da:	e007      	b.n	80032ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	60da      	str	r2, [r3, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b10      	subs	r3, #16
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <DMA_CalcBaseAndBitshift+0x64>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <DMA_CalcBaseAndBitshift+0x68>)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d909      	bls.n	800333a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	1d1a      	adds	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	659a      	str	r2, [r3, #88]	; 0x58
 8003338:	e007      	b.n	800334a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab
 8003360:	080076b0 	.word	0x080076b0

08003364 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d856      	bhi.n	8003432 <DMA_CheckFifoParam+0xce>
 8003384:	a201      	add	r2, pc, #4	; (adr r2, 800338c <DMA_CheckFifoParam+0x28>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	0800339d 	.word	0x0800339d
 8003390:	080033af 	.word	0x080033af
 8003394:	0800339d 	.word	0x0800339d
 8003398:	08003433 	.word	0x08003433
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d046      	beq.n	8003436 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e043      	b.n	8003436 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b6:	d140      	bne.n	800343a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e03d      	b.n	800343a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033c6:	d121      	bne.n	800340c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d837      	bhi.n	800343e <DMA_CheckFifoParam+0xda>
 80033ce:	a201      	add	r2, pc, #4	; (adr r2, 80033d4 <DMA_CheckFifoParam+0x70>)
 80033d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d4:	080033e5 	.word	0x080033e5
 80033d8:	080033eb 	.word	0x080033eb
 80033dc:	080033e5 	.word	0x080033e5
 80033e0:	080033fd 	.word	0x080033fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
      break;
 80033e8:	e030      	b.n	800344c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d025      	beq.n	8003442 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fa:	e022      	b.n	8003442 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003404:	d11f      	bne.n	8003446 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340a:	e01c      	b.n	8003446 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d903      	bls.n	800341a <DMA_CheckFifoParam+0xb6>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d003      	beq.n	8003420 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003418:	e018      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]
      break;
 800341e:	e015      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00e      	beq.n	800344a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      break;
 8003430:	e00b      	b.n	800344a <DMA_CheckFifoParam+0xe6>
      break;
 8003432:	bf00      	nop
 8003434:	e00a      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e008      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e006      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e004      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;   
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <DMA_CheckFifoParam+0xe8>
      break;
 800344a:	bf00      	nop
    }
  } 
  
  return status; 
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop

0800345c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
 8003476:	e159      	b.n	800372c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	429a      	cmp	r2, r3
 8003492:	f040 8148 	bne.w	8003726 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d005      	beq.n	80034ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d130      	bne.n	8003510 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4013      	ands	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e4:	2201      	movs	r2, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	091b      	lsrs	r3, r3, #4
 80034fa:	f003 0201 	and.w	r2, r3, #1
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	2b03      	cmp	r3, #3
 800351a:	d017      	beq.n	800354c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	2203      	movs	r2, #3
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d123      	bne.n	80035a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	08da      	lsrs	r2, r3, #3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3208      	adds	r2, #8
 8003560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	220f      	movs	r2, #15
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	08da      	lsrs	r2, r3, #3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3208      	adds	r2, #8
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	2203      	movs	r2, #3
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0203 	and.w	r2, r3, #3
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a2 	beq.w	8003726 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b57      	ldr	r3, [pc, #348]	; (8003744 <HAL_GPIO_Init+0x2e8>)
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	4a56      	ldr	r2, [pc, #344]	; (8003744 <HAL_GPIO_Init+0x2e8>)
 80035ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f0:	6453      	str	r3, [r2, #68]	; 0x44
 80035f2:	4b54      	ldr	r3, [pc, #336]	; (8003744 <HAL_GPIO_Init+0x2e8>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035fe:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_GPIO_Init+0x2ec>)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a49      	ldr	r2, [pc, #292]	; (800374c <HAL_GPIO_Init+0x2f0>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d019      	beq.n	800365e <HAL_GPIO_Init+0x202>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a48      	ldr	r2, [pc, #288]	; (8003750 <HAL_GPIO_Init+0x2f4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d013      	beq.n	800365a <HAL_GPIO_Init+0x1fe>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a47      	ldr	r2, [pc, #284]	; (8003754 <HAL_GPIO_Init+0x2f8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00d      	beq.n	8003656 <HAL_GPIO_Init+0x1fa>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a46      	ldr	r2, [pc, #280]	; (8003758 <HAL_GPIO_Init+0x2fc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d007      	beq.n	8003652 <HAL_GPIO_Init+0x1f6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a45      	ldr	r2, [pc, #276]	; (800375c <HAL_GPIO_Init+0x300>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_GPIO_Init+0x1f2>
 800364a:	2304      	movs	r3, #4
 800364c:	e008      	b.n	8003660 <HAL_GPIO_Init+0x204>
 800364e:	2307      	movs	r3, #7
 8003650:	e006      	b.n	8003660 <HAL_GPIO_Init+0x204>
 8003652:	2303      	movs	r3, #3
 8003654:	e004      	b.n	8003660 <HAL_GPIO_Init+0x204>
 8003656:	2302      	movs	r3, #2
 8003658:	e002      	b.n	8003660 <HAL_GPIO_Init+0x204>
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_GPIO_Init+0x204>
 800365e:	2300      	movs	r3, #0
 8003660:	69fa      	ldr	r2, [r7, #28]
 8003662:	f002 0203 	and.w	r2, r2, #3
 8003666:	0092      	lsls	r2, r2, #2
 8003668:	4093      	lsls	r3, r2
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	4313      	orrs	r3, r2
 800366e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003670:	4935      	ldr	r1, [pc, #212]	; (8003748 <HAL_GPIO_Init+0x2ec>)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	3302      	adds	r3, #2
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800367e:	4b38      	ldr	r3, [pc, #224]	; (8003760 <HAL_GPIO_Init+0x304>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036a2:	4a2f      	ldr	r2, [pc, #188]	; (8003760 <HAL_GPIO_Init+0x304>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_GPIO_Init+0x304>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	43db      	mvns	r3, r3
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	4013      	ands	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036cc:	4a24      	ldr	r2, [pc, #144]	; (8003760 <HAL_GPIO_Init+0x304>)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036d2:	4b23      	ldr	r3, [pc, #140]	; (8003760 <HAL_GPIO_Init+0x304>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	43db      	mvns	r3, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4013      	ands	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036f6:	4a1a      	ldr	r2, [pc, #104]	; (8003760 <HAL_GPIO_Init+0x304>)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036fc:	4b18      	ldr	r3, [pc, #96]	; (8003760 <HAL_GPIO_Init+0x304>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <HAL_GPIO_Init+0x304>)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3301      	adds	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b0f      	cmp	r3, #15
 8003730:	f67f aea2 	bls.w	8003478 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40013800 	.word	0x40013800
 800374c:	40020000 	.word	0x40020000
 8003750:	40020400 	.word	0x40020400
 8003754:	40020800 	.word	0x40020800
 8003758:	40020c00 	.word	0x40020c00
 800375c:	40021000 	.word	0x40021000
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003780:	e003      	b.n	800378a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e128      	b.n	80039fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a90      	ldr	r2, [pc, #576]	; (8003a04 <HAL_I2S_Init+0x26c>)
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fe9f 	bl	8001508 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2202      	movs	r2, #2
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037e0:	f023 030f 	bic.w	r3, r3, #15
 80037e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2202      	movs	r2, #2
 80037ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d060      	beq.n	80038b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d102      	bne.n	8003804 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037fe:	2310      	movs	r3, #16
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e001      	b.n	8003808 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003804:	2320      	movs	r3, #32
 8003806:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b20      	cmp	r3, #32
 800380e:	d802      	bhi.n	8003816 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003816:	2001      	movs	r0, #1
 8003818:	f001 fa8e 	bl	8004d38 <HAL_RCCEx_GetPeriphCLKFreq>
 800381c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003826:	d125      	bne.n	8003874 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d010      	beq.n	8003852 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	fbb2 f2f3 	udiv	r2, r2, r3
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	461a      	mov	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	3305      	adds	r3, #5
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	e01f      	b.n	8003892 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	fbb2 f2f3 	udiv	r2, r2, r3
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	461a      	mov	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	3305      	adds	r3, #5
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e00e      	b.n	8003892 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	fbb2 f2f3 	udiv	r2, r2, r3
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	461a      	mov	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	fbb2 f3f3 	udiv	r3, r2, r3
 800388e:	3305      	adds	r3, #5
 8003890:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4a5c      	ldr	r2, [pc, #368]	; (8003a08 <HAL_I2S_Init+0x270>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	08db      	lsrs	r3, r3, #3
 800389c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	021b      	lsls	r3, r3, #8
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e003      	b.n	80038c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80038b8:	2302      	movs	r3, #2
 80038ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d902      	bls.n	80038cc <HAL_I2S_Init+0x134>
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2bff      	cmp	r3, #255	; 0xff
 80038ca:	d907      	bls.n	80038dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	f043 0210 	orr.w	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e08f      	b.n	80039fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691a      	ldr	r2, [r3, #16]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	ea42 0103 	orr.w	r1, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038fa:	f023 030f 	bic.w	r3, r3, #15
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6851      	ldr	r1, [r2, #4]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	4311      	orrs	r1, r2
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68d2      	ldr	r2, [r2, #12]
 800390c:	4311      	orrs	r1, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6992      	ldr	r2, [r2, #24]
 8003912:	430a      	orrs	r2, r1
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d161      	bne.n	80039ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <HAL_I2S_Init+0x274>)
 800392c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a37      	ldr	r2, [pc, #220]	; (8003a10 <HAL_I2S_Init+0x278>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_I2S_Init+0x1a4>
 8003938:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_I2S_Init+0x27c>)
 800393a:	e001      	b.n	8003940 <HAL_I2S_Init+0x1a8>
 800393c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	4932      	ldr	r1, [pc, #200]	; (8003a10 <HAL_I2S_Init+0x278>)
 8003948:	428a      	cmp	r2, r1
 800394a:	d101      	bne.n	8003950 <HAL_I2S_Init+0x1b8>
 800394c:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <HAL_I2S_Init+0x27c>)
 800394e:	e001      	b.n	8003954 <HAL_I2S_Init+0x1bc>
 8003950:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003954:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003958:	f023 030f 	bic.w	r3, r3, #15
 800395c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2b      	ldr	r2, [pc, #172]	; (8003a10 <HAL_I2S_Init+0x278>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_I2S_Init+0x1d4>
 8003968:	4b2a      	ldr	r3, [pc, #168]	; (8003a14 <HAL_I2S_Init+0x27c>)
 800396a:	e001      	b.n	8003970 <HAL_I2S_Init+0x1d8>
 800396c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003970:	2202      	movs	r2, #2
 8003972:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <HAL_I2S_Init+0x278>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_I2S_Init+0x1ea>
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_I2S_Init+0x27c>)
 8003980:	e001      	b.n	8003986 <HAL_I2S_Init+0x1ee>
 8003982:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003992:	d003      	beq.n	800399c <HAL_I2S_Init+0x204>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d103      	bne.n	80039a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800399c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	e001      	b.n	80039a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039b2:	4313      	orrs	r3, r2
 80039b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039bc:	4313      	orrs	r3, r2
 80039be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039c6:	4313      	orrs	r3, r2
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	897b      	ldrh	r3, [r7, #10]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <HAL_I2S_Init+0x278>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d101      	bne.n	80039e4 <HAL_I2S_Init+0x24c>
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <HAL_I2S_Init+0x27c>)
 80039e2:	e001      	b.n	80039e8 <HAL_I2S_Init+0x250>
 80039e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e8:	897a      	ldrh	r2, [r7, #10]
 80039ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	08003ce1 	.word	0x08003ce1
 8003a08:	cccccccd 	.word	0xcccccccd
 8003a0c:	08003df5 	.word	0x08003df5
 8003a10:	40003800 	.word	0x40003800
 8003a14:	40003400 	.word	0x40003400

08003a18 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_I2S_Transmit_DMA+0x1a>
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e08e      	b.n	8003b54 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_I2S_Transmit_DMA+0x2e>
 8003a42:	2302      	movs	r3, #2
 8003a44:	e086      	b.n	8003b54 <HAL_I2S_Transmit_DMA+0x13c>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d005      	beq.n	8003a66 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	e076      	b.n	8003b54 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d002      	beq.n	8003a92 <HAL_I2S_Transmit_DMA+0x7a>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d10a      	bne.n	8003aa8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa6:	e005      	b.n	8003ab4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_I2S_Transmit_DMA+0x144>)
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac0:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <HAL_I2S_Transmit_DMA+0x148>)
 8003ac2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	4a26      	ldr	r2, [pc, #152]	; (8003b64 <HAL_I2S_Transmit_DMA+0x14c>)
 8003aca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ad4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003adc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003ae4:	f7ff f966 	bl	8002db4 <HAL_DMA_Start_IT>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00f      	beq.n	8003b0e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f043 0208 	orr.w	r2, r3, #8
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e022      	b.n	8003b54 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d107      	bne.n	8003b2c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b2a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0202 	orr.w	r2, r2, #2
 8003b48:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	08003bbf 	.word	0x08003bbf
 8003b60:	08003b7d 	.word	0x08003b7d
 8003b64:	08003bdb 	.word	0x08003bdb

08003b68 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10e      	bne.n	8003bb0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0202 	bic.w	r2, r2, #2
 8003ba0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7fd fa5f 	bl	8001074 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7fd fa39 	bl	8001044 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0203 	bic.w	r2, r2, #3
 8003bf6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	f043 0208 	orr.w	r2, r3, #8
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7fd fa51 	bl	80010c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	881a      	ldrh	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10e      	bne.n	8003c7a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c6a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7fd f9fd 	bl	8001074 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c7a:	bf00      	nop
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b082      	sub	sp, #8
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	b292      	uxth	r2, r2
 8003c96:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ff48 	bl	8003b68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d13a      	bne.n	8003d72 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d109      	bne.n	8003d1a <I2S_IRQHandler+0x3a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d102      	bne.n	8003d1a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ffb4 	bl	8003c82 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d126      	bne.n	8003d72 <I2S_IRQHandler+0x92>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d11f      	bne.n	8003d72 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d40:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d42:	2300      	movs	r3, #0
 8003d44:	613b      	str	r3, [r7, #16]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	f043 0202 	orr.w	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fd f9a7 	bl	80010c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d136      	bne.n	8003dec <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d109      	bne.n	8003d9c <I2S_IRQHandler+0xbc>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d102      	bne.n	8003d9c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff45 	bl	8003c26 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d122      	bne.n	8003dec <I2S_IRQHandler+0x10c>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d11b      	bne.n	8003dec <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dc2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd f96a 	bl	80010c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dec:	bf00      	nop
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a92      	ldr	r2, [pc, #584]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e0e:	4b92      	ldr	r3, [pc, #584]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e10:	e001      	b.n	8003e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a8b      	ldr	r2, [pc, #556]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e2c:	4b8a      	ldr	r3, [pc, #552]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e2e:	e001      	b.n	8003e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e40:	d004      	beq.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 8099 	bne.w	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d107      	bne.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d002      	beq.n	8003e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f925 	bl	80040b0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d107      	bne.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f9c8 	bl	8004210 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e86:	2b40      	cmp	r3, #64	; 0x40
 8003e88:	d13a      	bne.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d035      	beq.n	8003f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a6e      	ldr	r2, [pc, #440]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e9e:	4b6e      	ldr	r3, [pc, #440]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ea0:	e001      	b.n	8003ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4969      	ldr	r1, [pc, #420]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eae:	428b      	cmp	r3, r1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eb2:	4b69      	ldr	r3, [pc, #420]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb4:	e001      	b.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003eb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ebe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ece:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef2:	f043 0202 	orr.w	r2, r3, #2
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd f8e0 	bl	80010c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	f040 80c3 	bne.w	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80bd 	beq.w	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f26:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a49      	ldr	r2, [pc, #292]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f32:	4b49      	ldr	r3, [pc, #292]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f34:	e001      	b.n	8003f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4944      	ldr	r1, [pc, #272]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f42:	428b      	cmp	r3, r1
 8003f44:	d101      	bne.n	8003f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f46:	4b44      	ldr	r3, [pc, #272]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f48:	e001      	b.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f52:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f043 0204 	orr.w	r2, r3, #4
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd f8a2 	bl	80010c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f7c:	e089      	b.n	8004092 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d107      	bne.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d002      	beq.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f000 f8be 	bl	8004114 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8fd 	bl	80041ac <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d12f      	bne.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d02a      	beq.n	800401c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fd4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a1e      	ldr	r2, [pc, #120]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d101      	bne.n	8003fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fe2:	e001      	b.n	8003fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fe4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4919      	ldr	r1, [pc, #100]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff0:	428b      	cmp	r3, r1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ff4:	4b18      	ldr	r3, [pc, #96]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff6:	e001      	b.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004000:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f043 0202 	orr.w	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd f852 	bl	80010c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b08      	cmp	r3, #8
 8004024:	d136      	bne.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d031      	beq.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d101      	bne.n	800403e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800403a:	4b07      	ldr	r3, [pc, #28]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800403c:	e001      	b.n	8004042 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800403e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4902      	ldr	r1, [pc, #8]	; (8004054 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404a:	428b      	cmp	r3, r1
 800404c:	d106      	bne.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800404e:	4b02      	ldr	r3, [pc, #8]	; (8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004050:	e006      	b.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004052:	bf00      	nop
 8004054:	40003800 	.word	0x40003800
 8004058:	40003400 	.word	0x40003400
 800405c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004060:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004064:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004074:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f043 0204 	orr.w	r2, r3, #4
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd f818 	bl	80010c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004090:	e000      	b.n	8004094 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004092:	bf00      	nop
}
 8004094:	bf00      	nop
 8004096:	3720      	adds	r7, #32
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	1c99      	adds	r1, r3, #2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6251      	str	r1, [r2, #36]	; 0x24
 80040c2:	881a      	ldrh	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d113      	bne.n	800410a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff ffc9 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800410a:	bf00      	nop
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	1c99      	adds	r1, r3, #2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6251      	str	r1, [r2, #36]	; 0x24
 8004126:	8819      	ldrh	r1, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1d      	ldr	r2, [pc, #116]	; (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <I2SEx_TxISR_I2SExt+0x22>
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004134:	e001      	b.n	800413a <I2SEx_TxISR_I2SExt+0x26>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413a:	460a      	mov	r2, r1
 800413c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d121      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a12      	ldr	r2, [pc, #72]	; (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <I2SEx_TxISR_I2SExt+0x50>
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004162:	e001      	b.n	8004168 <I2SEx_TxISR_I2SExt+0x54>
 8004164:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	490d      	ldr	r1, [pc, #52]	; (80041a4 <I2SEx_TxISR_I2SExt+0x90>)
 8004170:	428b      	cmp	r3, r1
 8004172:	d101      	bne.n	8004178 <I2SEx_TxISR_I2SExt+0x64>
 8004174:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <I2SEx_TxISR_I2SExt+0x94>)
 8004176:	e001      	b.n	800417c <I2SEx_TxISR_I2SExt+0x68>
 8004178:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800417c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004180:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff ff81 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800419a:	bf00      	nop
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003400 	.word	0x40003400

080041ac <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68d8      	ldr	r0, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	1c99      	adds	r1, r3, #2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041c4:	b282      	uxth	r2, r0
 80041c6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d113      	bne.n	8004208 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ee:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff ff4a 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d101      	bne.n	8004226 <I2SEx_RxISR_I2SExt+0x16>
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004224:	e001      	b.n	800422a <I2SEx_RxISR_I2SExt+0x1a>
 8004226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800422a:	68d8      	ldr	r0, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	1c99      	adds	r1, r3, #2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004236:	b282      	uxth	r2, r0
 8004238:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d121      	bne.n	8004296 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a12      	ldr	r2, [pc, #72]	; (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <I2SEx_RxISR_I2SExt+0x50>
 800425c:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 800425e:	e001      	b.n	8004264 <I2SEx_RxISR_I2SExt+0x54>
 8004260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	490d      	ldr	r1, [pc, #52]	; (80042a0 <I2SEx_RxISR_I2SExt+0x90>)
 800426c:	428b      	cmp	r3, r1
 800426e:	d101      	bne.n	8004274 <I2SEx_RxISR_I2SExt+0x64>
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <I2SEx_RxISR_I2SExt+0x94>)
 8004272:	e001      	b.n	8004278 <I2SEx_RxISR_I2SExt+0x68>
 8004274:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800427c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d106      	bne.n	8004296 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff03 	bl	800409c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004296:	bf00      	nop
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40003800 	.word	0x40003800
 80042a4:	40003400 	.word	0x40003400

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e267      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b85      	ldr	r3, [pc, #532]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b7e      	ldr	r3, [pc, #504]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e242      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b76      	ldr	r3, [pc, #472]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a75      	ldr	r2, [pc, #468]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b70      	ldr	r3, [pc, #448]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6f      	ldr	r2, [pc, #444]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b6d      	ldr	r3, [pc, #436]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6c      	ldr	r2, [pc, #432]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b69      	ldr	r3, [pc, #420]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a68      	ldr	r2, [pc, #416]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b66      	ldr	r3, [pc, #408]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a65      	ldr	r2, [pc, #404]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fd ff78 	bl	8002254 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fd ff74 	bl	8002254 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e207      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b5b      	ldr	r3, [pc, #364]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fd ff64 	bl	8002254 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd ff60 	bl	8002254 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1f3      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b51      	ldr	r3, [pc, #324]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043be:	4b4a      	ldr	r3, [pc, #296]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b41      	ldr	r3, [pc, #260]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c7      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4937      	ldr	r1, [pc, #220]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b34      	ldr	r3, [pc, #208]	; (80044ec <HAL_RCC_OscConfig+0x244>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fd ff19 	bl	8002254 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004426:	f7fd ff15 	bl	8002254 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a8      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b2b      	ldr	r3, [pc, #172]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4925      	ldr	r1, [pc, #148]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCC_OscConfig+0x244>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd fef8 	bl	8002254 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fd fef4 	bl	8002254 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e187      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b1b      	ldr	r3, [pc, #108]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d036      	beq.n	8004500 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <HAL_RCC_OscConfig+0x248>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fd fed8 	bl	8002254 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fd fed4 	bl	8002254 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e167      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_OscConfig+0x240>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
 80044c6:	e01b      	b.n	8004500 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_OscConfig+0x248>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fd fec1 	bl	8002254 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e00e      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fd febd 	bl	8002254 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d907      	bls.n	80044f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e150      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470000 	.word	0x42470000
 80044f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f4:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80044f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1ea      	bne.n	80044d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8097 	beq.w	800463c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450e:	2300      	movs	r3, #0
 8004510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10f      	bne.n	800453e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	4b7d      	ldr	r3, [pc, #500]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	4a7c      	ldr	r2, [pc, #496]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	; 0x40
 800452e:	4b7a      	ldr	r3, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453a:	2301      	movs	r3, #1
 800453c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b77      	ldr	r3, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x474>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d118      	bne.n	800457c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454a:	4b74      	ldr	r3, [pc, #464]	; (800471c <HAL_RCC_OscConfig+0x474>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a73      	ldr	r2, [pc, #460]	; (800471c <HAL_RCC_OscConfig+0x474>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004556:	f7fd fe7d 	bl	8002254 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455e:	f7fd fe79 	bl	8002254 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e10c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004570:	4b6a      	ldr	r3, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x474>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <HAL_RCC_OscConfig+0x2ea>
 8004584:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a63      	ldr	r2, [pc, #396]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 800458a:	f043 0301 	orr.w	r3, r3, #1
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	e01c      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	2b05      	cmp	r3, #5
 8004598:	d10c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x30c>
 800459a:	4b5f      	ldr	r3, [pc, #380]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a5e      	ldr	r2, [pc, #376]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a0:	f043 0304 	orr.w	r3, r3, #4
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	4b5c      	ldr	r3, [pc, #368]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a5b      	ldr	r2, [pc, #364]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	e00b      	b.n	80045cc <HAL_RCC_OscConfig+0x324>
 80045b4:	4b58      	ldr	r3, [pc, #352]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	4a57      	ldr	r2, [pc, #348]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045ba:	f023 0301 	bic.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	; 0x70
 80045c0:	4b55      	ldr	r3, [pc, #340]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a54      	ldr	r2, [pc, #336]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045c6:	f023 0304 	bic.w	r3, r3, #4
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d015      	beq.n	8004600 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fd fe3e 	bl	8002254 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fd fe3a 	bl	8002254 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e0cb      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	4b49      	ldr	r3, [pc, #292]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0ee      	beq.n	80045dc <HAL_RCC_OscConfig+0x334>
 80045fe:	e014      	b.n	800462a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fd fe28 	bl	8002254 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004606:	e00a      	b.n	800461e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004608:	f7fd fe24 	bl	8002254 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e0b5      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	4b3e      	ldr	r3, [pc, #248]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ee      	bne.n	8004608 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d105      	bne.n	800463c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004630:	4b39      	ldr	r3, [pc, #228]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	4a38      	ldr	r2, [pc, #224]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80a1 	beq.w	8004788 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004646:	4b34      	ldr	r3, [pc, #208]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b08      	cmp	r3, #8
 8004650:	d05c      	beq.n	800470c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d141      	bne.n	80046de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465a:	4b31      	ldr	r3, [pc, #196]	; (8004720 <HAL_RCC_OscConfig+0x478>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fd fdf8 	bl	8002254 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004666:	e008      	b.n	800467a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004668:	f7fd fdf4 	bl	8002254 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e087      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467a:	4b27      	ldr	r3, [pc, #156]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f0      	bne.n	8004668 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69da      	ldr	r2, [r3, #28]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469c:	085b      	lsrs	r3, r3, #1
 800469e:	3b01      	subs	r3, #1
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	491b      	ldr	r1, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_OscConfig+0x478>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b6:	f7fd fdcd 	bl	8002254 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046be:	f7fd fdc9 	bl	8002254 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e05c      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x416>
 80046dc:	e054      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046de:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_OscConfig+0x478>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e4:	f7fd fdb6 	bl	8002254 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd fdb2 	bl	8002254 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e045      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <HAL_RCC_OscConfig+0x470>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x444>
 800470a:	e03d      	b.n	8004788 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e038      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
 8004720:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004724:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d028      	beq.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d121      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	429a      	cmp	r2, r3
 800474c:	d11a      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800475a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800475c:	4293      	cmp	r3, r2
 800475e:	d111      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004780:	429a      	cmp	r2, r3
 8004782:	d001      	beq.n	8004788 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fd fce4 	bl	8002254 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fd fce0 	bl	8002254 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fc44 	bl	80021cc <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	08007698 	.word	0x08007698
 800495c:	20000008 	.word	0x20000008
 8004960:	20000010 	.word	0x20000010

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004968:	b090      	sub	sp, #64	; 0x40
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	2300      	movs	r3, #0
 8004976:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b59      	ldr	r3, [pc, #356]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80a1 	bhi.w	8004ad0 <HAL_RCC_GetSysClockFreq+0x16c>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e09b      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800499c:	e09b      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_GetSysClockFreq+0x188>)
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049a2:	e098      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b4f      	ldr	r3, [pc, #316]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b4d      	ldr	r3, [pc, #308]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d028      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b4a      	ldr	r3, [pc, #296]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	2200      	movs	r2, #0
 80049c2:	623b      	str	r3, [r7, #32]
 80049c4:	627a      	str	r2, [r7, #36]	; 0x24
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049cc:	2100      	movs	r1, #0
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_GetSysClockFreq+0x188>)
 80049d0:	fb03 f201 	mul.w	r2, r3, r1
 80049d4:	2300      	movs	r3, #0
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	4413      	add	r3, r2
 80049dc:	4a43      	ldr	r2, [pc, #268]	; (8004aec <HAL_RCC_GetSysClockFreq+0x188>)
 80049de:	fba0 1202 	umull	r1, r2, r0, r2
 80049e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e4:	460a      	mov	r2, r1
 80049e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80049e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ea:	4413      	add	r3, r2
 80049ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f0:	2200      	movs	r2, #0
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	61fa      	str	r2, [r7, #28]
 80049f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049fe:	f7fb ff85 	bl	800090c <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4613      	mov	r3, r2
 8004a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a0a:	e053      	b.n	8004ab4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a0c:	4b35      	ldr	r3, [pc, #212]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	099b      	lsrs	r3, r3, #6
 8004a12:	2200      	movs	r2, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	617a      	str	r2, [r7, #20]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a1e:	f04f 0b00 	mov.w	fp, #0
 8004a22:	4652      	mov	r2, sl
 8004a24:	465b      	mov	r3, fp
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	0159      	lsls	r1, r3, #5
 8004a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a34:	0150      	lsls	r0, r2, #5
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a3e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a56:	ebb2 0408 	subs.w	r4, r2, r8
 8004a5a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	f04f 0300 	mov.w	r3, #0
 8004a66:	00eb      	lsls	r3, r5, #3
 8004a68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a6c:	00e2      	lsls	r2, r4, #3
 8004a6e:	4614      	mov	r4, r2
 8004a70:	461d      	mov	r5, r3
 8004a72:	eb14 030a 	adds.w	r3, r4, sl
 8004a76:	603b      	str	r3, [r7, #0]
 8004a78:	eb45 030b 	adc.w	r3, r5, fp
 8004a7c:	607b      	str	r3, [r7, #4]
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	028b      	lsls	r3, r1, #10
 8004a8e:	4621      	mov	r1, r4
 8004a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a94:	4621      	mov	r1, r4
 8004a96:	028a      	lsls	r2, r1, #10
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004aa8:	f7fb ff30 	bl	800090c <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004acc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ace:	e002      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ad2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3740      	adds	r7, #64	; 0x40
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023800 	.word	0x40023800
 8004ae8:	00f42400 	.word	0x00f42400
 8004aec:	017d7840 	.word	0x017d7840

08004af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004af4:	4b03      	ldr	r3, [pc, #12]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000008 	.word	0x20000008

08004b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b0c:	f7ff fff0 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b10:	4602      	mov	r2, r0
 8004b12:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	0a9b      	lsrs	r3, r3, #10
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	4903      	ldr	r1, [pc, #12]	; (8004b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1e:	5ccb      	ldrb	r3, [r1, r3]
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	080076a8 	.word	0x080076a8

08004b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b34:	f7ff ffdc 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	0b5b      	lsrs	r3, r3, #13
 8004b40:	f003 0307 	and.w	r3, r3, #7
 8004b44:	4903      	ldr	r1, [pc, #12]	; (8004b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b46:	5ccb      	ldrb	r3, [r1, r3]
 8004b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	080076a8 	.word	0x080076a8

08004b58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d105      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d038      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b80:	4b68      	ldr	r3, [pc, #416]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b86:	f7fd fb65 	bl	8002254 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b8e:	f7fd fb61 	bl	8002254 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e0bd      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba0:	4b61      	ldr	r3, [pc, #388]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1f0      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	071b      	lsls	r3, r3, #28
 8004bbe:	495a      	ldr	r1, [pc, #360]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bc6:	4b57      	ldr	r3, [pc, #348]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bcc:	f7fd fb42 	bl	8002254 <HAL_GetTick>
 8004bd0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bd4:	f7fd fb3e 	bl	8002254 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e09a      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be6:	4b50      	ldr	r3, [pc, #320]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8083 	beq.w	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	4b48      	ldr	r3, [pc, #288]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	4a47      	ldr	r2, [pc, #284]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c10:	4b45      	ldr	r3, [pc, #276]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c1c:	4b43      	ldr	r3, [pc, #268]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a42      	ldr	r2, [pc, #264]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c28:	f7fd fb14 	bl	8002254 <HAL_GetTick>
 8004c2c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c30:	f7fd fb10 	bl	8002254 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e06c      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c42:	4b3a      	ldr	r3, [pc, #232]	; (8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c4e:	4b36      	ldr	r3, [pc, #216]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c56:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d02f      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d028      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c6c:	4b2e      	ldr	r3, [pc, #184]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c74:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c76:	4b2e      	ldr	r3, [pc, #184]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c82:	4a29      	ldr	r2, [pc, #164]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c88:	4b27      	ldr	r3, [pc, #156]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d114      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fd fade 	bl	8002254 <HAL_GetTick>
 8004c98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9a:	e00a      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9c:	f7fd fada 	bl	8002254 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e034      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0ee      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cca:	d10d      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004ccc:	4b16      	ldr	r3, [pc, #88]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce0:	4911      	ldr	r1, [pc, #68]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	608b      	str	r3, [r1, #8]
 8004ce6:	e005      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a0e      	ldr	r2, [pc, #56]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cf2:	6093      	str	r3, [r2, #8]
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	4909      	ldr	r1, [pc, #36]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	7d1a      	ldrb	r2, [r3, #20]
 8004d16:	4b07      	ldr	r3, [pc, #28]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d18:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	42470068 	.word	0x42470068
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	42470e40 	.word	0x42470e40
 8004d34:	424711e0 	.word	0x424711e0

08004d38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d140      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d56:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d005      	beq.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d131      	bne.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d6c:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d6e:	617b      	str	r3, [r7, #20]
          break;
 8004d70:	e031      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d7e:	d109      	bne.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8a:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	e008      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004d94:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d9e:	4a15      	ldr	r2, [pc, #84]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004da6:	4b10      	ldr	r3, [pc, #64]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dac:	099b      	lsrs	r3, r3, #6
 8004dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc0:	0f1b      	lsrs	r3, r3, #28
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
          break;
 8004dce:	e002      	b.n	8004dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	617b      	str	r3, [r7, #20]
          break;
 8004dd4:	bf00      	nop
        }
      }
      break;
 8004dd6:	bf00      	nop
    }
  }
  return frequency;
 8004dd8:	697b      	ldr	r3, [r7, #20]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	371c      	adds	r7, #28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800
 8004dec:	00bb8000 	.word	0x00bb8000
 8004df0:	017d7840 	.word	0x017d7840
 8004df4:	00f42400 	.word	0x00f42400

08004df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e041      	b.n	8004e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7fc ff9e 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3304      	adds	r3, #4
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f000 f950 	bl	80050dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
	...

08004e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d001      	beq.n	8004eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e03c      	b.n	8004f2a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1e      	ldr	r2, [pc, #120]	; (8004f38 <HAL_TIM_Base_Start+0xa0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d018      	beq.n	8004ef4 <HAL_TIM_Base_Start+0x5c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d013      	beq.n	8004ef4 <HAL_TIM_Base_Start+0x5c>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	; (8004f3c <HAL_TIM_Base_Start+0xa4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d00e      	beq.n	8004ef4 <HAL_TIM_Base_Start+0x5c>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_Base_Start+0xa8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d009      	beq.n	8004ef4 <HAL_TIM_Base_Start+0x5c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_TIM_Base_Start+0xac>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d004      	beq.n	8004ef4 <HAL_TIM_Base_Start+0x5c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a16      	ldr	r2, [pc, #88]	; (8004f48 <HAL_TIM_Base_Start+0xb0>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d111      	bne.n	8004f18 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d010      	beq.n	8004f28 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f042 0201 	orr.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f16:	e007      	b.n	8004f28 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0201 	orr.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40014000 	.word	0x40014000

08004f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_TIM_ConfigClockSource+0x1c>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e0b4      	b.n	80050d2 <HAL_TIM_ConfigClockSource+0x186>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa0:	d03e      	beq.n	8005020 <HAL_TIM_ConfigClockSource+0xd4>
 8004fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fa6:	f200 8087 	bhi.w	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fae:	f000 8086 	beq.w	80050be <HAL_TIM_ConfigClockSource+0x172>
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d87f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b70      	cmp	r3, #112	; 0x70
 8004fba:	d01a      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8004fbc:	2b70      	cmp	r3, #112	; 0x70
 8004fbe:	d87b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b60      	cmp	r3, #96	; 0x60
 8004fc2:	d050      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x11a>
 8004fc4:	2b60      	cmp	r3, #96	; 0x60
 8004fc6:	d877      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b50      	cmp	r3, #80	; 0x50
 8004fca:	d03c      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0xfa>
 8004fcc:	2b50      	cmp	r3, #80	; 0x50
 8004fce:	d873      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d058      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x13a>
 8004fd4:	2b40      	cmp	r3, #64	; 0x40
 8004fd6:	d86f      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd8:	2b30      	cmp	r3, #48	; 0x30
 8004fda:	d064      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d86b      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d060      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d867      	bhi.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d05c      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d05a      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x15a>
 8004ff0:	e062      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6899      	ldr	r1, [r3, #8]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f000 f965 	bl	80052d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	609a      	str	r2, [r3, #8]
      break;
 800501e:	e04f      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6899      	ldr	r1, [r3, #8]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f000 f94e 	bl	80052d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005042:	609a      	str	r2, [r3, #8]
      break;
 8005044:	e03c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 f8c2 	bl	80051dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2150      	movs	r1, #80	; 0x50
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f91b 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8005064:	e02c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 f8e1 	bl	800523a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2160      	movs	r1, #96	; 0x60
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f90b 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 8005084:	e01c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 f8a2 	bl	80051dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2140      	movs	r1, #64	; 0x40
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 f8fb 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 80050a4:	e00c      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 f8f2 	bl	800529a <TIM_ITRx_SetConfig>
      break;
 80050b6:	e003      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e000      	b.n	80050c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a34      	ldr	r2, [pc, #208]	; (80051c0 <TIM_Base_SetConfig+0xe4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00f      	beq.n	8005114 <TIM_Base_SetConfig+0x38>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d00b      	beq.n	8005114 <TIM_Base_SetConfig+0x38>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a31      	ldr	r2, [pc, #196]	; (80051c4 <TIM_Base_SetConfig+0xe8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_Base_SetConfig+0x38>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a30      	ldr	r2, [pc, #192]	; (80051c8 <TIM_Base_SetConfig+0xec>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x38>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a2f      	ldr	r2, [pc, #188]	; (80051cc <TIM_Base_SetConfig+0xf0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a25      	ldr	r2, [pc, #148]	; (80051c0 <TIM_Base_SetConfig+0xe4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d01b      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d017      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a22      	ldr	r2, [pc, #136]	; (80051c4 <TIM_Base_SetConfig+0xe8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d013      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <TIM_Base_SetConfig+0xec>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00f      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a20      	ldr	r2, [pc, #128]	; (80051cc <TIM_Base_SetConfig+0xf0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00b      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <TIM_Base_SetConfig+0xf4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d007      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <TIM_Base_SetConfig+0xf8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_Base_SetConfig+0x8a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <TIM_Base_SetConfig+0xfc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d108      	bne.n	8005178 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	4313      	orrs	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <TIM_Base_SetConfig+0xe4>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d103      	bne.n	80051ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	615a      	str	r2, [r3, #20]
}
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800

080051dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	f023 0201 	bic.w	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 030a 	bic.w	r3, r3, #10
 8005218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523a:	b480      	push	{r7}
 800523c:	b087      	sub	sp, #28
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f023 0210 	bic.w	r2, r3, #16
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005264:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	031b      	lsls	r3, r3, #12
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f043 0307 	orr.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	021a      	lsls	r2, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	431a      	orrs	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	609a      	str	r2, [r3, #8]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005320:	2b01      	cmp	r3, #1
 8005322:	d101      	bne.n	8005328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005324:	2302      	movs	r3, #2
 8005326:	e050      	b.n	80053ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d018      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005374:	d013      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00e      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d009      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a15      	ldr	r2, [pc, #84]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d004      	beq.n	800539e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10c      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40014000 	.word	0x40014000

080053ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e03f      	b.n	800547e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fc fe3e 	bl	8002094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	; 0x24
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fcdf 	bl	8005df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005444:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005454:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005464:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	4613      	mov	r3, r2
 8005492:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b20      	cmp	r3, #32
 800549e:	d11d      	bne.n	80054dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_UART_Receive_IT+0x26>
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e016      	b.n	80054de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d101      	bne.n	80054be <HAL_UART_Receive_IT+0x38>
 80054ba:	2302      	movs	r3, #2
 80054bc:	e00f      	b.n	80054de <HAL_UART_Receive_IT+0x58>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fab6 	bl	8005a44 <UART_Start_Receive_IT>
 80054d8:	4603      	mov	r3, r0
 80054da:	e000      	b.n	80054de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054dc:	2302      	movs	r3, #2
  }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ba      	sub	sp, #232	; 0xe8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10f      	bne.n	800554e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_UART_IRQHandler+0x66>
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb99 	bl	8005c7e <UART_Receive_IT>
      return;
 800554c:	e256      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800554e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80de 	beq.w	8005714 <HAL_UART_IRQHandler+0x22c>
 8005558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80d1 	beq.w	8005714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <HAL_UART_IRQHandler+0xae>
 800557e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d005      	beq.n	8005596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_UART_IRQHandler+0xd2>
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	f043 0202 	orr.w	r2, r3, #2
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xf6>
 80055c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <HAL_UART_IRQHandler+0x126>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d105      	bne.n	8005602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f043 0208 	orr.w	r2, r3, #8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 81ed 	beq.w	80059f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_UART_IRQHandler+0x14e>
 8005624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fb24 	bl	8005c7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <HAL_UART_IRQHandler+0x17a>
 800565a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d04f      	beq.n	8005702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fa2c 	bl	8005ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	d141      	bne.n	80056fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800568c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3314      	adds	r3, #20
 800569e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1d9      	bne.n	8005676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4a7d      	ldr	r2, [pc, #500]	; (80058c4 <HAL_UART_IRQHandler+0x3dc>)
 80056d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fd fc34 	bl	8002f44 <HAL_DMA_Abort_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e00e      	b.n	8005710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f990 	bl	8005a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	e00a      	b.n	8005710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f98c 	bl	8005a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e006      	b.n	8005710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f988 	bl	8005a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800570e:	e170      	b.n	80059f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	bf00      	nop
    return;
 8005712:	e16e      	b.n	80059f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	f040 814a 	bne.w	80059b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8143 	beq.w	80059b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800572c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 813c 	beq.w	80059b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800575a:	2b40      	cmp	r3, #64	; 0x40
 800575c:	f040 80b4 	bne.w	80058c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800576c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8140 	beq.w	80059f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800577e:	429a      	cmp	r2, r3
 8005780:	f080 8139 	bcs.w	80059f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800578a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005796:	f000 8088 	beq.w	80058aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1d9      	bne.n	800579a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800580a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800580e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800581c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e1      	bne.n	80057e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800584c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e3      	bne.n	8005822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800588c:	65ba      	str	r2, [r7, #88]	; 0x58
 800588e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800589a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e3      	bne.n	8005868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd fadd 	bl	8002e64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f8b6 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058c0:	e099      	b.n	80059f6 <HAL_UART_IRQHandler+0x50e>
 80058c2:	bf00      	nop
 80058c4:	08005b87 	.word	0x08005b87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 808b 	beq.w	80059fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8086 	beq.w	80059fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	330c      	adds	r3, #12
 800590e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005912:	647a      	str	r2, [r7, #68]	; 0x44
 8005914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e3      	bne.n	80058ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	623b      	str	r3, [r7, #32]
   return(result);
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800594a:	633a      	str	r2, [r7, #48]	; 0x30
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e3      	bne.n	8005926 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	60fb      	str	r3, [r7, #12]
   return(result);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0310 	bic.w	r3, r3, #16
 8005982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	617b      	str	r3, [r7, #20]
   return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e3      	bne.n	800596c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f83e 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b0:	e023      	b.n	80059fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_UART_IRQHandler+0x4ea>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f8ef 	bl	8005bae <UART_Transmit_IT>
    return;
 80059d0:	e014      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00e      	beq.n	80059fc <HAL_UART_IRQHandler+0x514>
 80059de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f92f 	bl	8005c4e <UART_EndTransmit_IT>
    return;
 80059f0:	e004      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
    return;
 80059f2:	bf00      	nop
 80059f4:	e002      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
      return;
 80059f6:	bf00      	nop
 80059f8:	e000      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
      return;
 80059fa:	bf00      	nop
  }
}
 80059fc:	37e8      	adds	r7, #232	; 0xe8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop

08005a04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	88fa      	ldrh	r2, [r7, #6]
 8005a62:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2222      	movs	r2, #34	; 0x22
 8005a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a90:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	695a      	ldr	r2, [r3, #20]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f042 0201 	orr.w	r2, r2, #1
 8005aa0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f042 0220 	orr.w	r2, r2, #32
 8005ab0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b095      	sub	sp, #84	; 0x54
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	330c      	adds	r3, #12
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	330c      	adds	r3, #12
 8005ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ae8:	643a      	str	r2, [r7, #64]	; 0x40
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e5      	bne.n	8005ac8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d119      	bne.n	8005b6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f023 0310 	bic.w	r3, r3, #16
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b58:	61ba      	str	r2, [r7, #24]
 8005b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6979      	ldr	r1, [r7, #20]
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	613b      	str	r3, [r7, #16]
   return(result);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b7a:	bf00      	nop
 8005b7c:	3754      	adds	r7, #84	; 0x54
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ff39 	bl	8005a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ba6:	bf00      	nop
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b085      	sub	sp, #20
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b21      	cmp	r3, #33	; 0x21
 8005bc0:	d13e      	bne.n	8005c40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bca:	d114      	bne.n	8005bf6 <UART_Transmit_IT+0x48>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d110      	bne.n	8005bf6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	1c9a      	adds	r2, r3, #2
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	621a      	str	r2, [r3, #32]
 8005bf4:	e008      	b.n	8005c08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	1c59      	adds	r1, r3, #1
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6211      	str	r1, [r2, #32]
 8005c00:	781a      	ldrb	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4619      	mov	r1, r3
 8005c16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10f      	bne.n	8005c3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	e000      	b.n	8005c42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c40:	2302      	movs	r3, #2
  }
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fec8 	bl	8005a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b08c      	sub	sp, #48	; 0x30
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b22      	cmp	r3, #34	; 0x22
 8005c90:	f040 80ab 	bne.w	8005dea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9c:	d117      	bne.n	8005cce <UART_Receive_IT+0x50>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d113      	bne.n	8005cce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
 8005ccc:	e026      	b.n	8005d1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce0:	d007      	beq.n	8005cf2 <UART_Receive_IT+0x74>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <UART_Receive_IT+0x82>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	e008      	b.n	8005d12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d15a      	bne.n	8005de6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0220 	bic.w	r2, r2, #32
 8005d3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695a      	ldr	r2, [r3, #20]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0201 	bic.w	r2, r2, #1
 8005d5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d135      	bne.n	8005ddc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	330c      	adds	r3, #12
 8005d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f023 0310 	bic.w	r3, r3, #16
 8005d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	330c      	adds	r3, #12
 8005d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d96:	623a      	str	r2, [r7, #32]
 8005d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	69f9      	ldr	r1, [r7, #28]
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e5      	bne.n	8005d76 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d10a      	bne.n	8005dce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fe29 	bl	8005a2c <HAL_UARTEx_RxEventCallback>
 8005dda:	e002      	b.n	8005de2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7fb fcbf 	bl	8001760 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e002      	b.n	8005dec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005dea:	2302      	movs	r3, #2
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3730      	adds	r7, #48	; 0x30
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005df8:	b0c0      	sub	sp, #256	; 0x100
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e10:	68d9      	ldr	r1, [r3, #12]
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	ea40 0301 	orr.w	r3, r0, r1
 8005e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e4c:	f021 010c 	bic.w	r1, r1, #12
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6e:	6999      	ldr	r1, [r3, #24]
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	ea40 0301 	orr.w	r3, r0, r1
 8005e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b8f      	ldr	r3, [pc, #572]	; (80060c0 <UART_SetConfig+0x2cc>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d005      	beq.n	8005e94 <UART_SetConfig+0xa0>
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b8d      	ldr	r3, [pc, #564]	; (80060c4 <UART_SetConfig+0x2d0>)
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d104      	bne.n	8005e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e94:	f7fe fe4c 	bl	8004b30 <HAL_RCC_GetPCLK2Freq>
 8005e98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e9c:	e003      	b.n	8005ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7fe fe33 	bl	8004b08 <HAL_RCC_GetPCLK1Freq>
 8005ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb0:	f040 810c 	bne.w	80060cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	462b      	mov	r3, r5
 8005eca:	1891      	adds	r1, r2, r2
 8005ecc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ece:	415b      	adcs	r3, r3
 8005ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	eb12 0801 	adds.w	r8, r2, r1
 8005edc:	4629      	mov	r1, r5
 8005ede:	eb43 0901 	adc.w	r9, r3, r1
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ef6:	4690      	mov	r8, r2
 8005ef8:	4699      	mov	r9, r3
 8005efa:	4623      	mov	r3, r4
 8005efc:	eb18 0303 	adds.w	r3, r8, r3
 8005f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f04:	462b      	mov	r3, r5
 8005f06:	eb49 0303 	adc.w	r3, r9, r3
 8005f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f22:	460b      	mov	r3, r1
 8005f24:	18db      	adds	r3, r3, r3
 8005f26:	653b      	str	r3, [r7, #80]	; 0x50
 8005f28:	4613      	mov	r3, r2
 8005f2a:	eb42 0303 	adc.w	r3, r2, r3
 8005f2e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f38:	f7fa fce8 	bl	800090c <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4b61      	ldr	r3, [pc, #388]	; (80060c8 <UART_SetConfig+0x2d4>)
 8005f42:	fba3 2302 	umull	r2, r3, r3, r2
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	011c      	lsls	r4, r3, #4
 8005f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f54:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	1891      	adds	r1, r2, r2
 8005f62:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f64:	415b      	adcs	r3, r3
 8005f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f72:	4649      	mov	r1, r9
 8005f74:	eb43 0b01 	adc.w	fp, r3, r1
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f8c:	4692      	mov	sl, r2
 8005f8e:	469b      	mov	fp, r3
 8005f90:	4643      	mov	r3, r8
 8005f92:	eb1a 0303 	adds.w	r3, sl, r3
 8005f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	18db      	adds	r3, r3, r3
 8005fbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fce:	f7fa fc9d 	bl	800090c <__aeabi_uldivmod>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4b3b      	ldr	r3, [pc, #236]	; (80060c8 <UART_SetConfig+0x2d4>)
 8005fda:	fba3 2301 	umull	r2, r3, r3, r1
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2264      	movs	r2, #100	; 0x64
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	1acb      	subs	r3, r1, r3
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fee:	4b36      	ldr	r3, [pc, #216]	; (80060c8 <UART_SetConfig+0x2d4>)
 8005ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ffc:	441c      	add	r4, r3
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006008:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800600c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006010:	4642      	mov	r2, r8
 8006012:	464b      	mov	r3, r9
 8006014:	1891      	adds	r1, r2, r2
 8006016:	63b9      	str	r1, [r7, #56]	; 0x38
 8006018:	415b      	adcs	r3, r3
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006020:	4641      	mov	r1, r8
 8006022:	1851      	adds	r1, r2, r1
 8006024:	6339      	str	r1, [r7, #48]	; 0x30
 8006026:	4649      	mov	r1, r9
 8006028:	414b      	adcs	r3, r1
 800602a:	637b      	str	r3, [r7, #52]	; 0x34
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006038:	4659      	mov	r1, fp
 800603a:	00cb      	lsls	r3, r1, #3
 800603c:	4651      	mov	r1, sl
 800603e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006042:	4651      	mov	r1, sl
 8006044:	00ca      	lsls	r2, r1, #3
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	4603      	mov	r3, r0
 800604c:	4642      	mov	r2, r8
 800604e:	189b      	adds	r3, r3, r2
 8006050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006054:	464b      	mov	r3, r9
 8006056:	460a      	mov	r2, r1
 8006058:	eb42 0303 	adc.w	r3, r2, r3
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800606c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006074:	460b      	mov	r3, r1
 8006076:	18db      	adds	r3, r3, r3
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
 800607a:	4613      	mov	r3, r2
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800608a:	f7fa fc3f 	bl	800090c <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4b0d      	ldr	r3, [pc, #52]	; (80060c8 <UART_SetConfig+0x2d4>)
 8006094:	fba3 1302 	umull	r1, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	2164      	movs	r1, #100	; 0x64
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	3332      	adds	r3, #50	; 0x32
 80060a6:	4a08      	ldr	r2, [pc, #32]	; (80060c8 <UART_SetConfig+0x2d4>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	f003 0207 	and.w	r2, r3, #7
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4422      	add	r2, r4
 80060ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060bc:	e105      	b.n	80062ca <UART_SetConfig+0x4d6>
 80060be:	bf00      	nop
 80060c0:	40011000 	.word	0x40011000
 80060c4:	40011400 	.word	0x40011400
 80060c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d0:	2200      	movs	r2, #0
 80060d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060de:	4642      	mov	r2, r8
 80060e0:	464b      	mov	r3, r9
 80060e2:	1891      	adds	r1, r2, r2
 80060e4:	6239      	str	r1, [r7, #32]
 80060e6:	415b      	adcs	r3, r3
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ee:	4641      	mov	r1, r8
 80060f0:	1854      	adds	r4, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0501 	adc.w	r5, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	00eb      	lsls	r3, r5, #3
 8006102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006106:	00e2      	lsls	r2, r4, #3
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	4643      	mov	r3, r8
 800610e:	18e3      	adds	r3, r4, r3
 8006110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006114:	464b      	mov	r3, r9
 8006116:	eb45 0303 	adc.w	r3, r5, r3
 800611a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800612a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800613a:	4629      	mov	r1, r5
 800613c:	008b      	lsls	r3, r1, #2
 800613e:	4621      	mov	r1, r4
 8006140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006144:	4621      	mov	r1, r4
 8006146:	008a      	lsls	r2, r1, #2
 8006148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800614c:	f7fa fbde 	bl	800090c <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4b60      	ldr	r3, [pc, #384]	; (80062d8 <UART_SetConfig+0x4e4>)
 8006156:	fba3 2302 	umull	r2, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	011c      	lsls	r4, r3, #4
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006162:	2200      	movs	r2, #0
 8006164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006168:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800616c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	1891      	adds	r1, r2, r2
 8006176:	61b9      	str	r1, [r7, #24]
 8006178:	415b      	adcs	r3, r3
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006180:	4641      	mov	r1, r8
 8006182:	1851      	adds	r1, r2, r1
 8006184:	6139      	str	r1, [r7, #16]
 8006186:	4649      	mov	r1, r9
 8006188:	414b      	adcs	r3, r1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006198:	4659      	mov	r1, fp
 800619a:	00cb      	lsls	r3, r1, #3
 800619c:	4651      	mov	r1, sl
 800619e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a2:	4651      	mov	r1, sl
 80061a4:	00ca      	lsls	r2, r1, #3
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	4642      	mov	r2, r8
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061b4:	464b      	mov	r3, r9
 80061b6:	460a      	mov	r2, r1
 80061b8:	eb42 0303 	adc.w	r3, r2, r3
 80061bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061d8:	4649      	mov	r1, r9
 80061da:	008b      	lsls	r3, r1, #2
 80061dc:	4641      	mov	r1, r8
 80061de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e2:	4641      	mov	r1, r8
 80061e4:	008a      	lsls	r2, r1, #2
 80061e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061ea:	f7fa fb8f 	bl	800090c <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <UART_SetConfig+0x4e4>)
 80061f4:	fba3 1302 	umull	r1, r3, r3, r2
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	2164      	movs	r1, #100	; 0x64
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	3332      	adds	r3, #50	; 0x32
 8006206:	4a34      	ldr	r2, [pc, #208]	; (80062d8 <UART_SetConfig+0x4e4>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006212:	441c      	add	r4, r3
 8006214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006218:	2200      	movs	r2, #0
 800621a:	673b      	str	r3, [r7, #112]	; 0x70
 800621c:	677a      	str	r2, [r7, #116]	; 0x74
 800621e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006222:	4642      	mov	r2, r8
 8006224:	464b      	mov	r3, r9
 8006226:	1891      	adds	r1, r2, r2
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	415b      	adcs	r3, r3
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006232:	4641      	mov	r1, r8
 8006234:	1851      	adds	r1, r2, r1
 8006236:	6039      	str	r1, [r7, #0]
 8006238:	4649      	mov	r1, r9
 800623a:	414b      	adcs	r3, r1
 800623c:	607b      	str	r3, [r7, #4]
 800623e:	f04f 0200 	mov.w	r2, #0
 8006242:	f04f 0300 	mov.w	r3, #0
 8006246:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800624a:	4659      	mov	r1, fp
 800624c:	00cb      	lsls	r3, r1, #3
 800624e:	4651      	mov	r1, sl
 8006250:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006254:	4651      	mov	r1, sl
 8006256:	00ca      	lsls	r2, r1, #3
 8006258:	4610      	mov	r0, r2
 800625a:	4619      	mov	r1, r3
 800625c:	4603      	mov	r3, r0
 800625e:	4642      	mov	r2, r8
 8006260:	189b      	adds	r3, r3, r2
 8006262:	66bb      	str	r3, [r7, #104]	; 0x68
 8006264:	464b      	mov	r3, r9
 8006266:	460a      	mov	r2, r1
 8006268:	eb42 0303 	adc.w	r3, r2, r3
 800626c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800626e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	663b      	str	r3, [r7, #96]	; 0x60
 8006278:	667a      	str	r2, [r7, #100]	; 0x64
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006286:	4649      	mov	r1, r9
 8006288:	008b      	lsls	r3, r1, #2
 800628a:	4641      	mov	r1, r8
 800628c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006290:	4641      	mov	r1, r8
 8006292:	008a      	lsls	r2, r1, #2
 8006294:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006298:	f7fa fb38 	bl	800090c <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <UART_SetConfig+0x4e4>)
 80062a2:	fba3 1302 	umull	r1, r3, r3, r2
 80062a6:	095b      	lsrs	r3, r3, #5
 80062a8:	2164      	movs	r1, #100	; 0x64
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	3332      	adds	r3, #50	; 0x32
 80062b4:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <UART_SetConfig+0x4e4>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	f003 020f 	and.w	r2, r3, #15
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4422      	add	r2, r4
 80062c8:	609a      	str	r2, [r3, #8]
}
 80062ca:	bf00      	nop
 80062cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062d0:	46bd      	mov	sp, r7
 80062d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062d6:	bf00      	nop
 80062d8:	51eb851f 	.word	0x51eb851f

080062dc <abs>:
 80062dc:	2800      	cmp	r0, #0
 80062de:	bfb8      	it	lt
 80062e0:	4240      	neglt	r0, r0
 80062e2:	4770      	bx	lr

080062e4 <atoi>:
 80062e4:	220a      	movs	r2, #10
 80062e6:	2100      	movs	r1, #0
 80062e8:	f000 ba48 	b.w	800677c <strtol>

080062ec <calloc>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	; (80062f8 <calloc+0xc>)
 80062ee:	460a      	mov	r2, r1
 80062f0:	4601      	mov	r1, r0
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	f000 b834 	b.w	8006360 <_calloc_r>
 80062f8:	20000018 	.word	0x20000018

080062fc <__errno>:
 80062fc:	4b01      	ldr	r3, [pc, #4]	; (8006304 <__errno+0x8>)
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000018 	.word	0x20000018

08006308 <__libc_init_array>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4d0d      	ldr	r5, [pc, #52]	; (8006340 <__libc_init_array+0x38>)
 800630c:	4c0d      	ldr	r4, [pc, #52]	; (8006344 <__libc_init_array+0x3c>)
 800630e:	1b64      	subs	r4, r4, r5
 8006310:	10a4      	asrs	r4, r4, #2
 8006312:	2600      	movs	r6, #0
 8006314:	42a6      	cmp	r6, r4
 8006316:	d109      	bne.n	800632c <__libc_init_array+0x24>
 8006318:	4d0b      	ldr	r5, [pc, #44]	; (8006348 <__libc_init_array+0x40>)
 800631a:	4c0c      	ldr	r4, [pc, #48]	; (800634c <__libc_init_array+0x44>)
 800631c:	f001 f98e 	bl	800763c <_init>
 8006320:	1b64      	subs	r4, r4, r5
 8006322:	10a4      	asrs	r4, r4, #2
 8006324:	2600      	movs	r6, #0
 8006326:	42a6      	cmp	r6, r4
 8006328:	d105      	bne.n	8006336 <__libc_init_array+0x2e>
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006330:	4798      	blx	r3
 8006332:	3601      	adds	r6, #1
 8006334:	e7ee      	b.n	8006314 <__libc_init_array+0xc>
 8006336:	f855 3b04 	ldr.w	r3, [r5], #4
 800633a:	4798      	blx	r3
 800633c:	3601      	adds	r6, #1
 800633e:	e7f2      	b.n	8006326 <__libc_init_array+0x1e>
 8006340:	0800790c 	.word	0x0800790c
 8006344:	0800790c 	.word	0x0800790c
 8006348:	0800790c 	.word	0x0800790c
 800634c:	08007910 	.word	0x08007910

08006350 <memset>:
 8006350:	4402      	add	r2, r0
 8006352:	4603      	mov	r3, r0
 8006354:	4293      	cmp	r3, r2
 8006356:	d100      	bne.n	800635a <memset+0xa>
 8006358:	4770      	bx	lr
 800635a:	f803 1b01 	strb.w	r1, [r3], #1
 800635e:	e7f9      	b.n	8006354 <memset+0x4>

08006360 <_calloc_r>:
 8006360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006362:	fba1 2402 	umull	r2, r4, r1, r2
 8006366:	b94c      	cbnz	r4, 800637c <_calloc_r+0x1c>
 8006368:	4611      	mov	r1, r2
 800636a:	9201      	str	r2, [sp, #4]
 800636c:	f000 f82e 	bl	80063cc <_malloc_r>
 8006370:	9a01      	ldr	r2, [sp, #4]
 8006372:	4605      	mov	r5, r0
 8006374:	b930      	cbnz	r0, 8006384 <_calloc_r+0x24>
 8006376:	4628      	mov	r0, r5
 8006378:	b003      	add	sp, #12
 800637a:	bd30      	pop	{r4, r5, pc}
 800637c:	220c      	movs	r2, #12
 800637e:	6002      	str	r2, [r0, #0]
 8006380:	2500      	movs	r5, #0
 8006382:	e7f8      	b.n	8006376 <_calloc_r+0x16>
 8006384:	4621      	mov	r1, r4
 8006386:	f7ff ffe3 	bl	8006350 <memset>
 800638a:	e7f4      	b.n	8006376 <_calloc_r+0x16>

0800638c <sbrk_aligned>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	4e0e      	ldr	r6, [pc, #56]	; (80063c8 <sbrk_aligned+0x3c>)
 8006390:	460c      	mov	r4, r1
 8006392:	6831      	ldr	r1, [r6, #0]
 8006394:	4605      	mov	r5, r0
 8006396:	b911      	cbnz	r1, 800639e <sbrk_aligned+0x12>
 8006398:	f000 f902 	bl	80065a0 <_sbrk_r>
 800639c:	6030      	str	r0, [r6, #0]
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f8fd 	bl	80065a0 <_sbrk_r>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	d00a      	beq.n	80063c0 <sbrk_aligned+0x34>
 80063aa:	1cc4      	adds	r4, r0, #3
 80063ac:	f024 0403 	bic.w	r4, r4, #3
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d007      	beq.n	80063c4 <sbrk_aligned+0x38>
 80063b4:	1a21      	subs	r1, r4, r0
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f8f2 	bl	80065a0 <_sbrk_r>
 80063bc:	3001      	adds	r0, #1
 80063be:	d101      	bne.n	80063c4 <sbrk_aligned+0x38>
 80063c0:	f04f 34ff 	mov.w	r4, #4294967295
 80063c4:	4620      	mov	r0, r4
 80063c6:	bd70      	pop	{r4, r5, r6, pc}
 80063c8:	200032dc 	.word	0x200032dc

080063cc <_malloc_r>:
 80063cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d0:	1ccd      	adds	r5, r1, #3
 80063d2:	f025 0503 	bic.w	r5, r5, #3
 80063d6:	3508      	adds	r5, #8
 80063d8:	2d0c      	cmp	r5, #12
 80063da:	bf38      	it	cc
 80063dc:	250c      	movcc	r5, #12
 80063de:	2d00      	cmp	r5, #0
 80063e0:	4607      	mov	r7, r0
 80063e2:	db01      	blt.n	80063e8 <_malloc_r+0x1c>
 80063e4:	42a9      	cmp	r1, r5
 80063e6:	d905      	bls.n	80063f4 <_malloc_r+0x28>
 80063e8:	230c      	movs	r3, #12
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	2600      	movs	r6, #0
 80063ee:	4630      	mov	r0, r6
 80063f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063f4:	4e2e      	ldr	r6, [pc, #184]	; (80064b0 <_malloc_r+0xe4>)
 80063f6:	f000 fce3 	bl	8006dc0 <__malloc_lock>
 80063fa:	6833      	ldr	r3, [r6, #0]
 80063fc:	461c      	mov	r4, r3
 80063fe:	bb34      	cbnz	r4, 800644e <_malloc_r+0x82>
 8006400:	4629      	mov	r1, r5
 8006402:	4638      	mov	r0, r7
 8006404:	f7ff ffc2 	bl	800638c <sbrk_aligned>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	4604      	mov	r4, r0
 800640c:	d14d      	bne.n	80064aa <_malloc_r+0xde>
 800640e:	6834      	ldr	r4, [r6, #0]
 8006410:	4626      	mov	r6, r4
 8006412:	2e00      	cmp	r6, #0
 8006414:	d140      	bne.n	8006498 <_malloc_r+0xcc>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	4631      	mov	r1, r6
 800641a:	4638      	mov	r0, r7
 800641c:	eb04 0803 	add.w	r8, r4, r3
 8006420:	f000 f8be 	bl	80065a0 <_sbrk_r>
 8006424:	4580      	cmp	r8, r0
 8006426:	d13a      	bne.n	800649e <_malloc_r+0xd2>
 8006428:	6821      	ldr	r1, [r4, #0]
 800642a:	3503      	adds	r5, #3
 800642c:	1a6d      	subs	r5, r5, r1
 800642e:	f025 0503 	bic.w	r5, r5, #3
 8006432:	3508      	adds	r5, #8
 8006434:	2d0c      	cmp	r5, #12
 8006436:	bf38      	it	cc
 8006438:	250c      	movcc	r5, #12
 800643a:	4629      	mov	r1, r5
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff ffa5 	bl	800638c <sbrk_aligned>
 8006442:	3001      	adds	r0, #1
 8006444:	d02b      	beq.n	800649e <_malloc_r+0xd2>
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	442b      	add	r3, r5
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	e00e      	b.n	800646c <_malloc_r+0xa0>
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	1b52      	subs	r2, r2, r5
 8006452:	d41e      	bmi.n	8006492 <_malloc_r+0xc6>
 8006454:	2a0b      	cmp	r2, #11
 8006456:	d916      	bls.n	8006486 <_malloc_r+0xba>
 8006458:	1961      	adds	r1, r4, r5
 800645a:	42a3      	cmp	r3, r4
 800645c:	6025      	str	r5, [r4, #0]
 800645e:	bf18      	it	ne
 8006460:	6059      	strne	r1, [r3, #4]
 8006462:	6863      	ldr	r3, [r4, #4]
 8006464:	bf08      	it	eq
 8006466:	6031      	streq	r1, [r6, #0]
 8006468:	5162      	str	r2, [r4, r5]
 800646a:	604b      	str	r3, [r1, #4]
 800646c:	4638      	mov	r0, r7
 800646e:	f104 060b 	add.w	r6, r4, #11
 8006472:	f000 fcab 	bl	8006dcc <__malloc_unlock>
 8006476:	f026 0607 	bic.w	r6, r6, #7
 800647a:	1d23      	adds	r3, r4, #4
 800647c:	1af2      	subs	r2, r6, r3
 800647e:	d0b6      	beq.n	80063ee <_malloc_r+0x22>
 8006480:	1b9b      	subs	r3, r3, r6
 8006482:	50a3      	str	r3, [r4, r2]
 8006484:	e7b3      	b.n	80063ee <_malloc_r+0x22>
 8006486:	6862      	ldr	r2, [r4, #4]
 8006488:	42a3      	cmp	r3, r4
 800648a:	bf0c      	ite	eq
 800648c:	6032      	streq	r2, [r6, #0]
 800648e:	605a      	strne	r2, [r3, #4]
 8006490:	e7ec      	b.n	800646c <_malloc_r+0xa0>
 8006492:	4623      	mov	r3, r4
 8006494:	6864      	ldr	r4, [r4, #4]
 8006496:	e7b2      	b.n	80063fe <_malloc_r+0x32>
 8006498:	4634      	mov	r4, r6
 800649a:	6876      	ldr	r6, [r6, #4]
 800649c:	e7b9      	b.n	8006412 <_malloc_r+0x46>
 800649e:	230c      	movs	r3, #12
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	4638      	mov	r0, r7
 80064a4:	f000 fc92 	bl	8006dcc <__malloc_unlock>
 80064a8:	e7a1      	b.n	80063ee <_malloc_r+0x22>
 80064aa:	6025      	str	r5, [r4, #0]
 80064ac:	e7de      	b.n	800646c <_malloc_r+0xa0>
 80064ae:	bf00      	nop
 80064b0:	200032d8 	.word	0x200032d8

080064b4 <_puts_r>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	460e      	mov	r6, r1
 80064b8:	4605      	mov	r5, r0
 80064ba:	b118      	cbz	r0, 80064c4 <_puts_r+0x10>
 80064bc:	6983      	ldr	r3, [r0, #24]
 80064be:	b90b      	cbnz	r3, 80064c4 <_puts_r+0x10>
 80064c0:	f000 fb5e 	bl	8006b80 <__sinit>
 80064c4:	69ab      	ldr	r3, [r5, #24]
 80064c6:	68ac      	ldr	r4, [r5, #8]
 80064c8:	b913      	cbnz	r3, 80064d0 <_puts_r+0x1c>
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fb58 	bl	8006b80 <__sinit>
 80064d0:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <_puts_r+0xd0>)
 80064d2:	429c      	cmp	r4, r3
 80064d4:	d120      	bne.n	8006518 <_puts_r+0x64>
 80064d6:	686c      	ldr	r4, [r5, #4]
 80064d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064da:	07db      	lsls	r3, r3, #31
 80064dc:	d405      	bmi.n	80064ea <_puts_r+0x36>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	0598      	lsls	r0, r3, #22
 80064e2:	d402      	bmi.n	80064ea <_puts_r+0x36>
 80064e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064e6:	f000 fbfb 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	0719      	lsls	r1, r3, #28
 80064ee:	d51d      	bpl.n	800652c <_puts_r+0x78>
 80064f0:	6923      	ldr	r3, [r4, #16]
 80064f2:	b1db      	cbz	r3, 800652c <_puts_r+0x78>
 80064f4:	3e01      	subs	r6, #1
 80064f6:	68a3      	ldr	r3, [r4, #8]
 80064f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80064fc:	3b01      	subs	r3, #1
 80064fe:	60a3      	str	r3, [r4, #8]
 8006500:	bb39      	cbnz	r1, 8006552 <_puts_r+0x9e>
 8006502:	2b00      	cmp	r3, #0
 8006504:	da38      	bge.n	8006578 <_puts_r+0xc4>
 8006506:	4622      	mov	r2, r4
 8006508:	210a      	movs	r1, #10
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f940 	bl	8006790 <__swbuf_r>
 8006510:	3001      	adds	r0, #1
 8006512:	d011      	beq.n	8006538 <_puts_r+0x84>
 8006514:	250a      	movs	r5, #10
 8006516:	e011      	b.n	800653c <_puts_r+0x88>
 8006518:	4b1b      	ldr	r3, [pc, #108]	; (8006588 <_puts_r+0xd4>)
 800651a:	429c      	cmp	r4, r3
 800651c:	d101      	bne.n	8006522 <_puts_r+0x6e>
 800651e:	68ac      	ldr	r4, [r5, #8]
 8006520:	e7da      	b.n	80064d8 <_puts_r+0x24>
 8006522:	4b1a      	ldr	r3, [pc, #104]	; (800658c <_puts_r+0xd8>)
 8006524:	429c      	cmp	r4, r3
 8006526:	bf08      	it	eq
 8006528:	68ec      	ldreq	r4, [r5, #12]
 800652a:	e7d5      	b.n	80064d8 <_puts_r+0x24>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f000 f980 	bl	8006834 <__swsetup_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	d0dd      	beq.n	80064f4 <_puts_r+0x40>
 8006538:	f04f 35ff 	mov.w	r5, #4294967295
 800653c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800653e:	07da      	lsls	r2, r3, #31
 8006540:	d405      	bmi.n	800654e <_puts_r+0x9a>
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	059b      	lsls	r3, r3, #22
 8006546:	d402      	bmi.n	800654e <_puts_r+0x9a>
 8006548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654a:	f000 fbca 	bl	8006ce2 <__retarget_lock_release_recursive>
 800654e:	4628      	mov	r0, r5
 8006550:	bd70      	pop	{r4, r5, r6, pc}
 8006552:	2b00      	cmp	r3, #0
 8006554:	da04      	bge.n	8006560 <_puts_r+0xac>
 8006556:	69a2      	ldr	r2, [r4, #24]
 8006558:	429a      	cmp	r2, r3
 800655a:	dc06      	bgt.n	800656a <_puts_r+0xb6>
 800655c:	290a      	cmp	r1, #10
 800655e:	d004      	beq.n	800656a <_puts_r+0xb6>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	6022      	str	r2, [r4, #0]
 8006566:	7019      	strb	r1, [r3, #0]
 8006568:	e7c5      	b.n	80064f6 <_puts_r+0x42>
 800656a:	4622      	mov	r2, r4
 800656c:	4628      	mov	r0, r5
 800656e:	f000 f90f 	bl	8006790 <__swbuf_r>
 8006572:	3001      	adds	r0, #1
 8006574:	d1bf      	bne.n	80064f6 <_puts_r+0x42>
 8006576:	e7df      	b.n	8006538 <_puts_r+0x84>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	250a      	movs	r5, #10
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	6022      	str	r2, [r4, #0]
 8006580:	701d      	strb	r5, [r3, #0]
 8006582:	e7db      	b.n	800653c <_puts_r+0x88>
 8006584:	08007890 	.word	0x08007890
 8006588:	080078b0 	.word	0x080078b0
 800658c:	08007870 	.word	0x08007870

08006590 <puts>:
 8006590:	4b02      	ldr	r3, [pc, #8]	; (800659c <puts+0xc>)
 8006592:	4601      	mov	r1, r0
 8006594:	6818      	ldr	r0, [r3, #0]
 8006596:	f7ff bf8d 	b.w	80064b4 <_puts_r>
 800659a:	bf00      	nop
 800659c:	20000018 	.word	0x20000018

080065a0 <_sbrk_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	; (80065bc <_sbrk_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fb fb44 	bl	8001c38 <_sbrk>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_sbrk_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_sbrk_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	200032e4 	.word	0x200032e4

080065c0 <strtok>:
 80065c0:	4b16      	ldr	r3, [pc, #88]	; (800661c <strtok+0x5c>)
 80065c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065c4:	681e      	ldr	r6, [r3, #0]
 80065c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80065c8:	4605      	mov	r5, r0
 80065ca:	b9fc      	cbnz	r4, 800660c <strtok+0x4c>
 80065cc:	2050      	movs	r0, #80	; 0x50
 80065ce:	9101      	str	r1, [sp, #4]
 80065d0:	f000 fbee 	bl	8006db0 <malloc>
 80065d4:	9901      	ldr	r1, [sp, #4]
 80065d6:	65b0      	str	r0, [r6, #88]	; 0x58
 80065d8:	4602      	mov	r2, r0
 80065da:	b920      	cbnz	r0, 80065e6 <strtok+0x26>
 80065dc:	4b10      	ldr	r3, [pc, #64]	; (8006620 <strtok+0x60>)
 80065de:	4811      	ldr	r0, [pc, #68]	; (8006624 <strtok+0x64>)
 80065e0:	2157      	movs	r1, #87	; 0x57
 80065e2:	f000 f995 	bl	8006910 <__assert_func>
 80065e6:	e9c0 4400 	strd	r4, r4, [r0]
 80065ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80065ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80065f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80065f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80065fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80065fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006602:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006606:	6184      	str	r4, [r0, #24]
 8006608:	7704      	strb	r4, [r0, #28]
 800660a:	6244      	str	r4, [r0, #36]	; 0x24
 800660c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800660e:	2301      	movs	r3, #1
 8006610:	4628      	mov	r0, r5
 8006612:	b002      	add	sp, #8
 8006614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006618:	f000 b806 	b.w	8006628 <__strtok_r>
 800661c:	20000018 	.word	0x20000018
 8006620:	080076bc 	.word	0x080076bc
 8006624:	080076d3 	.word	0x080076d3

08006628 <__strtok_r>:
 8006628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662a:	b908      	cbnz	r0, 8006630 <__strtok_r+0x8>
 800662c:	6810      	ldr	r0, [r2, #0]
 800662e:	b188      	cbz	r0, 8006654 <__strtok_r+0x2c>
 8006630:	4604      	mov	r4, r0
 8006632:	4620      	mov	r0, r4
 8006634:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006638:	460f      	mov	r7, r1
 800663a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800663e:	b91e      	cbnz	r6, 8006648 <__strtok_r+0x20>
 8006640:	b965      	cbnz	r5, 800665c <__strtok_r+0x34>
 8006642:	6015      	str	r5, [r2, #0]
 8006644:	4628      	mov	r0, r5
 8006646:	e005      	b.n	8006654 <__strtok_r+0x2c>
 8006648:	42b5      	cmp	r5, r6
 800664a:	d1f6      	bne.n	800663a <__strtok_r+0x12>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f0      	bne.n	8006632 <__strtok_r+0xa>
 8006650:	6014      	str	r4, [r2, #0]
 8006652:	7003      	strb	r3, [r0, #0]
 8006654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006656:	461c      	mov	r4, r3
 8006658:	e00c      	b.n	8006674 <__strtok_r+0x4c>
 800665a:	b915      	cbnz	r5, 8006662 <__strtok_r+0x3a>
 800665c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006660:	460e      	mov	r6, r1
 8006662:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006666:	42ab      	cmp	r3, r5
 8006668:	d1f7      	bne.n	800665a <__strtok_r+0x32>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0f3      	beq.n	8006656 <__strtok_r+0x2e>
 800666e:	2300      	movs	r3, #0
 8006670:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006674:	6014      	str	r4, [r2, #0]
 8006676:	e7ed      	b.n	8006654 <__strtok_r+0x2c>

08006678 <_strtol_l.constprop.0>:
 8006678:	2b01      	cmp	r3, #1
 800667a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800667e:	d001      	beq.n	8006684 <_strtol_l.constprop.0+0xc>
 8006680:	2b24      	cmp	r3, #36	; 0x24
 8006682:	d906      	bls.n	8006692 <_strtol_l.constprop.0+0x1a>
 8006684:	f7ff fe3a 	bl	80062fc <__errno>
 8006688:	2316      	movs	r3, #22
 800668a:	6003      	str	r3, [r0, #0]
 800668c:	2000      	movs	r0, #0
 800668e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006692:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006778 <_strtol_l.constprop.0+0x100>
 8006696:	460d      	mov	r5, r1
 8006698:	462e      	mov	r6, r5
 800669a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800669e:	f814 700c 	ldrb.w	r7, [r4, ip]
 80066a2:	f017 0708 	ands.w	r7, r7, #8
 80066a6:	d1f7      	bne.n	8006698 <_strtol_l.constprop.0+0x20>
 80066a8:	2c2d      	cmp	r4, #45	; 0x2d
 80066aa:	d132      	bne.n	8006712 <_strtol_l.constprop.0+0x9a>
 80066ac:	782c      	ldrb	r4, [r5, #0]
 80066ae:	2701      	movs	r7, #1
 80066b0:	1cb5      	adds	r5, r6, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d05b      	beq.n	800676e <_strtol_l.constprop.0+0xf6>
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d109      	bne.n	80066ce <_strtol_l.constprop.0+0x56>
 80066ba:	2c30      	cmp	r4, #48	; 0x30
 80066bc:	d107      	bne.n	80066ce <_strtol_l.constprop.0+0x56>
 80066be:	782c      	ldrb	r4, [r5, #0]
 80066c0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80066c4:	2c58      	cmp	r4, #88	; 0x58
 80066c6:	d14d      	bne.n	8006764 <_strtol_l.constprop.0+0xec>
 80066c8:	786c      	ldrb	r4, [r5, #1]
 80066ca:	2310      	movs	r3, #16
 80066cc:	3502      	adds	r5, #2
 80066ce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80066d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066d6:	f04f 0c00 	mov.w	ip, #0
 80066da:	fbb8 f9f3 	udiv	r9, r8, r3
 80066de:	4666      	mov	r6, ip
 80066e0:	fb03 8a19 	mls	sl, r3, r9, r8
 80066e4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80066e8:	f1be 0f09 	cmp.w	lr, #9
 80066ec:	d816      	bhi.n	800671c <_strtol_l.constprop.0+0xa4>
 80066ee:	4674      	mov	r4, lr
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	dd24      	ble.n	800673e <_strtol_l.constprop.0+0xc6>
 80066f4:	f1bc 0f00 	cmp.w	ip, #0
 80066f8:	db1e      	blt.n	8006738 <_strtol_l.constprop.0+0xc0>
 80066fa:	45b1      	cmp	r9, r6
 80066fc:	d31c      	bcc.n	8006738 <_strtol_l.constprop.0+0xc0>
 80066fe:	d101      	bne.n	8006704 <_strtol_l.constprop.0+0x8c>
 8006700:	45a2      	cmp	sl, r4
 8006702:	db19      	blt.n	8006738 <_strtol_l.constprop.0+0xc0>
 8006704:	fb06 4603 	mla	r6, r6, r3, r4
 8006708:	f04f 0c01 	mov.w	ip, #1
 800670c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006710:	e7e8      	b.n	80066e4 <_strtol_l.constprop.0+0x6c>
 8006712:	2c2b      	cmp	r4, #43	; 0x2b
 8006714:	bf04      	itt	eq
 8006716:	782c      	ldrbeq	r4, [r5, #0]
 8006718:	1cb5      	addeq	r5, r6, #2
 800671a:	e7ca      	b.n	80066b2 <_strtol_l.constprop.0+0x3a>
 800671c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006720:	f1be 0f19 	cmp.w	lr, #25
 8006724:	d801      	bhi.n	800672a <_strtol_l.constprop.0+0xb2>
 8006726:	3c37      	subs	r4, #55	; 0x37
 8006728:	e7e2      	b.n	80066f0 <_strtol_l.constprop.0+0x78>
 800672a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800672e:	f1be 0f19 	cmp.w	lr, #25
 8006732:	d804      	bhi.n	800673e <_strtol_l.constprop.0+0xc6>
 8006734:	3c57      	subs	r4, #87	; 0x57
 8006736:	e7db      	b.n	80066f0 <_strtol_l.constprop.0+0x78>
 8006738:	f04f 3cff 	mov.w	ip, #4294967295
 800673c:	e7e6      	b.n	800670c <_strtol_l.constprop.0+0x94>
 800673e:	f1bc 0f00 	cmp.w	ip, #0
 8006742:	da05      	bge.n	8006750 <_strtol_l.constprop.0+0xd8>
 8006744:	2322      	movs	r3, #34	; 0x22
 8006746:	6003      	str	r3, [r0, #0]
 8006748:	4646      	mov	r6, r8
 800674a:	b942      	cbnz	r2, 800675e <_strtol_l.constprop.0+0xe6>
 800674c:	4630      	mov	r0, r6
 800674e:	e79e      	b.n	800668e <_strtol_l.constprop.0+0x16>
 8006750:	b107      	cbz	r7, 8006754 <_strtol_l.constprop.0+0xdc>
 8006752:	4276      	negs	r6, r6
 8006754:	2a00      	cmp	r2, #0
 8006756:	d0f9      	beq.n	800674c <_strtol_l.constprop.0+0xd4>
 8006758:	f1bc 0f00 	cmp.w	ip, #0
 800675c:	d000      	beq.n	8006760 <_strtol_l.constprop.0+0xe8>
 800675e:	1e69      	subs	r1, r5, #1
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	e7f3      	b.n	800674c <_strtol_l.constprop.0+0xd4>
 8006764:	2430      	movs	r4, #48	; 0x30
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1b1      	bne.n	80066ce <_strtol_l.constprop.0+0x56>
 800676a:	2308      	movs	r3, #8
 800676c:	e7af      	b.n	80066ce <_strtol_l.constprop.0+0x56>
 800676e:	2c30      	cmp	r4, #48	; 0x30
 8006770:	d0a5      	beq.n	80066be <_strtol_l.constprop.0+0x46>
 8006772:	230a      	movs	r3, #10
 8006774:	e7ab      	b.n	80066ce <_strtol_l.constprop.0+0x56>
 8006776:	bf00      	nop
 8006778:	0800776d 	.word	0x0800776d

0800677c <strtol>:
 800677c:	4613      	mov	r3, r2
 800677e:	460a      	mov	r2, r1
 8006780:	4601      	mov	r1, r0
 8006782:	4802      	ldr	r0, [pc, #8]	; (800678c <strtol+0x10>)
 8006784:	6800      	ldr	r0, [r0, #0]
 8006786:	f7ff bf77 	b.w	8006678 <_strtol_l.constprop.0>
 800678a:	bf00      	nop
 800678c:	20000018 	.word	0x20000018

08006790 <__swbuf_r>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	460e      	mov	r6, r1
 8006794:	4614      	mov	r4, r2
 8006796:	4605      	mov	r5, r0
 8006798:	b118      	cbz	r0, 80067a2 <__swbuf_r+0x12>
 800679a:	6983      	ldr	r3, [r0, #24]
 800679c:	b90b      	cbnz	r3, 80067a2 <__swbuf_r+0x12>
 800679e:	f000 f9ef 	bl	8006b80 <__sinit>
 80067a2:	4b21      	ldr	r3, [pc, #132]	; (8006828 <__swbuf_r+0x98>)
 80067a4:	429c      	cmp	r4, r3
 80067a6:	d12b      	bne.n	8006800 <__swbuf_r+0x70>
 80067a8:	686c      	ldr	r4, [r5, #4]
 80067aa:	69a3      	ldr	r3, [r4, #24]
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	071a      	lsls	r2, r3, #28
 80067b2:	d52f      	bpl.n	8006814 <__swbuf_r+0x84>
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	b36b      	cbz	r3, 8006814 <__swbuf_r+0x84>
 80067b8:	6923      	ldr	r3, [r4, #16]
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	1ac0      	subs	r0, r0, r3
 80067be:	6963      	ldr	r3, [r4, #20]
 80067c0:	b2f6      	uxtb	r6, r6
 80067c2:	4283      	cmp	r3, r0
 80067c4:	4637      	mov	r7, r6
 80067c6:	dc04      	bgt.n	80067d2 <__swbuf_r+0x42>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 f944 	bl	8006a58 <_fflush_r>
 80067d0:	bb30      	cbnz	r0, 8006820 <__swbuf_r+0x90>
 80067d2:	68a3      	ldr	r3, [r4, #8]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	701e      	strb	r6, [r3, #0]
 80067e0:	6963      	ldr	r3, [r4, #20]
 80067e2:	3001      	adds	r0, #1
 80067e4:	4283      	cmp	r3, r0
 80067e6:	d004      	beq.n	80067f2 <__swbuf_r+0x62>
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	07db      	lsls	r3, r3, #31
 80067ec:	d506      	bpl.n	80067fc <__swbuf_r+0x6c>
 80067ee:	2e0a      	cmp	r6, #10
 80067f0:	d104      	bne.n	80067fc <__swbuf_r+0x6c>
 80067f2:	4621      	mov	r1, r4
 80067f4:	4628      	mov	r0, r5
 80067f6:	f000 f92f 	bl	8006a58 <_fflush_r>
 80067fa:	b988      	cbnz	r0, 8006820 <__swbuf_r+0x90>
 80067fc:	4638      	mov	r0, r7
 80067fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006800:	4b0a      	ldr	r3, [pc, #40]	; (800682c <__swbuf_r+0x9c>)
 8006802:	429c      	cmp	r4, r3
 8006804:	d101      	bne.n	800680a <__swbuf_r+0x7a>
 8006806:	68ac      	ldr	r4, [r5, #8]
 8006808:	e7cf      	b.n	80067aa <__swbuf_r+0x1a>
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <__swbuf_r+0xa0>)
 800680c:	429c      	cmp	r4, r3
 800680e:	bf08      	it	eq
 8006810:	68ec      	ldreq	r4, [r5, #12]
 8006812:	e7ca      	b.n	80067aa <__swbuf_r+0x1a>
 8006814:	4621      	mov	r1, r4
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f80c 	bl	8006834 <__swsetup_r>
 800681c:	2800      	cmp	r0, #0
 800681e:	d0cb      	beq.n	80067b8 <__swbuf_r+0x28>
 8006820:	f04f 37ff 	mov.w	r7, #4294967295
 8006824:	e7ea      	b.n	80067fc <__swbuf_r+0x6c>
 8006826:	bf00      	nop
 8006828:	08007890 	.word	0x08007890
 800682c:	080078b0 	.word	0x080078b0
 8006830:	08007870 	.word	0x08007870

08006834 <__swsetup_r>:
 8006834:	4b32      	ldr	r3, [pc, #200]	; (8006900 <__swsetup_r+0xcc>)
 8006836:	b570      	push	{r4, r5, r6, lr}
 8006838:	681d      	ldr	r5, [r3, #0]
 800683a:	4606      	mov	r6, r0
 800683c:	460c      	mov	r4, r1
 800683e:	b125      	cbz	r5, 800684a <__swsetup_r+0x16>
 8006840:	69ab      	ldr	r3, [r5, #24]
 8006842:	b913      	cbnz	r3, 800684a <__swsetup_r+0x16>
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f99b 	bl	8006b80 <__sinit>
 800684a:	4b2e      	ldr	r3, [pc, #184]	; (8006904 <__swsetup_r+0xd0>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d10f      	bne.n	8006870 <__swsetup_r+0x3c>
 8006850:	686c      	ldr	r4, [r5, #4]
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006858:	0719      	lsls	r1, r3, #28
 800685a:	d42c      	bmi.n	80068b6 <__swsetup_r+0x82>
 800685c:	06dd      	lsls	r5, r3, #27
 800685e:	d411      	bmi.n	8006884 <__swsetup_r+0x50>
 8006860:	2309      	movs	r3, #9
 8006862:	6033      	str	r3, [r6, #0]
 8006864:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	f04f 30ff 	mov.w	r0, #4294967295
 800686e:	e03e      	b.n	80068ee <__swsetup_r+0xba>
 8006870:	4b25      	ldr	r3, [pc, #148]	; (8006908 <__swsetup_r+0xd4>)
 8006872:	429c      	cmp	r4, r3
 8006874:	d101      	bne.n	800687a <__swsetup_r+0x46>
 8006876:	68ac      	ldr	r4, [r5, #8]
 8006878:	e7eb      	b.n	8006852 <__swsetup_r+0x1e>
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <__swsetup_r+0xd8>)
 800687c:	429c      	cmp	r4, r3
 800687e:	bf08      	it	eq
 8006880:	68ec      	ldreq	r4, [r5, #12]
 8006882:	e7e6      	b.n	8006852 <__swsetup_r+0x1e>
 8006884:	0758      	lsls	r0, r3, #29
 8006886:	d512      	bpl.n	80068ae <__swsetup_r+0x7a>
 8006888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800688a:	b141      	cbz	r1, 800689e <__swsetup_r+0x6a>
 800688c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006890:	4299      	cmp	r1, r3
 8006892:	d002      	beq.n	800689a <__swsetup_r+0x66>
 8006894:	4630      	mov	r0, r6
 8006896:	f000 fa9f 	bl	8006dd8 <_free_r>
 800689a:	2300      	movs	r3, #0
 800689c:	6363      	str	r3, [r4, #52]	; 0x34
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	2300      	movs	r3, #0
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	6923      	ldr	r3, [r4, #16]
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f043 0308 	orr.w	r3, r3, #8
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	6923      	ldr	r3, [r4, #16]
 80068b8:	b94b      	cbnz	r3, 80068ce <__swsetup_r+0x9a>
 80068ba:	89a3      	ldrh	r3, [r4, #12]
 80068bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c4:	d003      	beq.n	80068ce <__swsetup_r+0x9a>
 80068c6:	4621      	mov	r1, r4
 80068c8:	4630      	mov	r0, r6
 80068ca:	f000 fa31 	bl	8006d30 <__smakebuf_r>
 80068ce:	89a0      	ldrh	r0, [r4, #12]
 80068d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068d4:	f010 0301 	ands.w	r3, r0, #1
 80068d8:	d00a      	beq.n	80068f0 <__swsetup_r+0xbc>
 80068da:	2300      	movs	r3, #0
 80068dc:	60a3      	str	r3, [r4, #8]
 80068de:	6963      	ldr	r3, [r4, #20]
 80068e0:	425b      	negs	r3, r3
 80068e2:	61a3      	str	r3, [r4, #24]
 80068e4:	6923      	ldr	r3, [r4, #16]
 80068e6:	b943      	cbnz	r3, 80068fa <__swsetup_r+0xc6>
 80068e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068ec:	d1ba      	bne.n	8006864 <__swsetup_r+0x30>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
 80068f0:	0781      	lsls	r1, r0, #30
 80068f2:	bf58      	it	pl
 80068f4:	6963      	ldrpl	r3, [r4, #20]
 80068f6:	60a3      	str	r3, [r4, #8]
 80068f8:	e7f4      	b.n	80068e4 <__swsetup_r+0xb0>
 80068fa:	2000      	movs	r0, #0
 80068fc:	e7f7      	b.n	80068ee <__swsetup_r+0xba>
 80068fe:	bf00      	nop
 8006900:	20000018 	.word	0x20000018
 8006904:	08007890 	.word	0x08007890
 8006908:	080078b0 	.word	0x080078b0
 800690c:	08007870 	.word	0x08007870

08006910 <__assert_func>:
 8006910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006912:	4614      	mov	r4, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <__assert_func+0x2c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4605      	mov	r5, r0
 800691c:	68d8      	ldr	r0, [r3, #12]
 800691e:	b14c      	cbz	r4, 8006934 <__assert_func+0x24>
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <__assert_func+0x30>)
 8006922:	9100      	str	r1, [sp, #0]
 8006924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006928:	4906      	ldr	r1, [pc, #24]	; (8006944 <__assert_func+0x34>)
 800692a:	462b      	mov	r3, r5
 800692c:	f000 f9a6 	bl	8006c7c <fiprintf>
 8006930:	f000 fde2 	bl	80074f8 <abort>
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <__assert_func+0x38>)
 8006936:	461c      	mov	r4, r3
 8006938:	e7f3      	b.n	8006922 <__assert_func+0x12>
 800693a:	bf00      	nop
 800693c:	20000018 	.word	0x20000018
 8006940:	08007730 	.word	0x08007730
 8006944:	0800773d 	.word	0x0800773d
 8006948:	0800776b 	.word	0x0800776b

0800694c <__sflush_r>:
 800694c:	898a      	ldrh	r2, [r1, #12]
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	0710      	lsls	r0, r2, #28
 8006956:	460c      	mov	r4, r1
 8006958:	d458      	bmi.n	8006a0c <__sflush_r+0xc0>
 800695a:	684b      	ldr	r3, [r1, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc05      	bgt.n	800696c <__sflush_r+0x20>
 8006960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	dc02      	bgt.n	800696c <__sflush_r+0x20>
 8006966:	2000      	movs	r0, #0
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696e:	2e00      	cmp	r6, #0
 8006970:	d0f9      	beq.n	8006966 <__sflush_r+0x1a>
 8006972:	2300      	movs	r3, #0
 8006974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006978:	682f      	ldr	r7, [r5, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	d032      	beq.n	80069e4 <__sflush_r+0x98>
 800697e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	075a      	lsls	r2, r3, #29
 8006984:	d505      	bpl.n	8006992 <__sflush_r+0x46>
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	1ac0      	subs	r0, r0, r3
 800698a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698c:	b10b      	cbz	r3, 8006992 <__sflush_r+0x46>
 800698e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	2300      	movs	r3, #0
 8006994:	4602      	mov	r2, r0
 8006996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x66>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	291d      	cmp	r1, #29
 80069a8:	d82c      	bhi.n	8006a04 <__sflush_r+0xb8>
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <__sflush_r+0x108>)
 80069ac:	40ca      	lsrs	r2, r1
 80069ae:	07d6      	lsls	r6, r2, #31
 80069b0:	d528      	bpl.n	8006a04 <__sflush_r+0xb8>
 80069b2:	2200      	movs	r2, #0
 80069b4:	6062      	str	r2, [r4, #4]
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	d504      	bpl.n	80069c8 <__sflush_r+0x7c>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0x7a>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b903      	cbnz	r3, 80069c8 <__sflush_r+0x7c>
 80069c6:	6560      	str	r0, [r4, #84]	; 0x54
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d0ca      	beq.n	8006966 <__sflush_r+0x1a>
 80069d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <__sflush_r+0x92>
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f9fd 	bl	8006dd8 <_free_r>
 80069de:	2000      	movs	r0, #0
 80069e0:	6360      	str	r0, [r4, #52]	; 0x34
 80069e2:	e7c1      	b.n	8006968 <__sflush_r+0x1c>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	2301      	movs	r3, #1
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	1c41      	adds	r1, r0, #1
 80069ee:	d1c7      	bne.n	8006980 <__sflush_r+0x34>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0c4      	beq.n	8006980 <__sflush_r+0x34>
 80069f6:	2b1d      	cmp	r3, #29
 80069f8:	d001      	beq.n	80069fe <__sflush_r+0xb2>
 80069fa:	2b16      	cmp	r3, #22
 80069fc:	d101      	bne.n	8006a02 <__sflush_r+0xb6>
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	e7b1      	b.n	8006966 <__sflush_r+0x1a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	e7ad      	b.n	8006968 <__sflush_r+0x1c>
 8006a0c:	690f      	ldr	r7, [r1, #16]
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d0a9      	beq.n	8006966 <__sflush_r+0x1a>
 8006a12:	0793      	lsls	r3, r2, #30
 8006a14:	680e      	ldr	r6, [r1, #0]
 8006a16:	bf08      	it	eq
 8006a18:	694b      	ldreq	r3, [r1, #20]
 8006a1a:	600f      	str	r7, [r1, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	2300      	movne	r3, #0
 8006a20:	eba6 0807 	sub.w	r8, r6, r7
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	f1b8 0f00 	cmp.w	r8, #0
 8006a2a:	dd9c      	ble.n	8006966 <__sflush_r+0x1a>
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a30:	4643      	mov	r3, r8
 8006a32:	463a      	mov	r2, r7
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dc06      	bgt.n	8006a4a <__sflush_r+0xfe>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e78e      	b.n	8006968 <__sflush_r+0x1c>
 8006a4a:	4407      	add	r7, r0
 8006a4c:	eba8 0800 	sub.w	r8, r8, r0
 8006a50:	e7e9      	b.n	8006a26 <__sflush_r+0xda>
 8006a52:	bf00      	nop
 8006a54:	20400001 	.word	0x20400001

08006a58 <_fflush_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b913      	cbnz	r3, 8006a68 <_fflush_r+0x10>
 8006a62:	2500      	movs	r5, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	b118      	cbz	r0, 8006a72 <_fflush_r+0x1a>
 8006a6a:	6983      	ldr	r3, [r0, #24]
 8006a6c:	b90b      	cbnz	r3, 8006a72 <_fflush_r+0x1a>
 8006a6e:	f000 f887 	bl	8006b80 <__sinit>
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <_fflush_r+0x6c>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d11b      	bne.n	8006ab0 <_fflush_r+0x58>
 8006a78:	686c      	ldr	r4, [r5, #4]
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ef      	beq.n	8006a62 <_fflush_r+0xa>
 8006a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d404      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a88:	0599      	lsls	r1, r3, #22
 8006a8a:	d402      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8e:	f000 f927 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8006a92:	4628      	mov	r0, r5
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff ff59 	bl	800694c <__sflush_r>
 8006a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a9c:	07da      	lsls	r2, r3, #31
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d4e0      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	d4dd      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aaa:	f000 f91a 	bl	8006ce2 <__retarget_lock_release_recursive>
 8006aae:	e7d9      	b.n	8006a64 <_fflush_r+0xc>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <_fflush_r+0x70>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <_fflush_r+0x62>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7df      	b.n	8006a7a <_fflush_r+0x22>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <_fflush_r+0x74>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7da      	b.n	8006a7a <_fflush_r+0x22>
 8006ac4:	08007890 	.word	0x08007890
 8006ac8:	080078b0 	.word	0x080078b0
 8006acc:	08007870 	.word	0x08007870

08006ad0 <std>:
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8006ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ade:	6083      	str	r3, [r0, #8]
 8006ae0:	8181      	strh	r1, [r0, #12]
 8006ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae4:	81c2      	strh	r2, [r0, #14]
 8006ae6:	6183      	str	r3, [r0, #24]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	2208      	movs	r2, #8
 8006aec:	305c      	adds	r0, #92	; 0x5c
 8006aee:	f7ff fc2f 	bl	8006350 <memset>
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x38>)
 8006af4:	6263      	str	r3, [r4, #36]	; 0x24
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x3c>)
 8006af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x40>)
 8006afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x44>)
 8006b00:	6224      	str	r4, [r4, #32]
 8006b02:	6323      	str	r3, [r4, #48]	; 0x30
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	bf00      	nop
 8006b08:	0800744d 	.word	0x0800744d
 8006b0c:	0800746f 	.word	0x0800746f
 8006b10:	080074a7 	.word	0x080074a7
 8006b14:	080074cb 	.word	0x080074cb

08006b18 <_cleanup_r>:
 8006b18:	4901      	ldr	r1, [pc, #4]	; (8006b20 <_cleanup_r+0x8>)
 8006b1a:	f000 b8c1 	b.w	8006ca0 <_fwalk_reent>
 8006b1e:	bf00      	nop
 8006b20:	08006a59 	.word	0x08006a59

08006b24 <__sfmoreglue>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	2268      	movs	r2, #104	; 0x68
 8006b28:	1e4d      	subs	r5, r1, #1
 8006b2a:	4355      	muls	r5, r2
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b32:	f7ff fc4b 	bl	80063cc <_malloc_r>
 8006b36:	4604      	mov	r4, r0
 8006b38:	b140      	cbz	r0, 8006b4c <__sfmoreglue+0x28>
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b40:	300c      	adds	r0, #12
 8006b42:	60a0      	str	r0, [r4, #8]
 8006b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b48:	f7ff fc02 	bl	8006350 <memset>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}

08006b50 <__sfp_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sfp_lock_acquire+0x8>)
 8006b52:	f000 b8c5 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	200032e1 	.word	0x200032e1

08006b5c <__sfp_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sfp_lock_release+0x8>)
 8006b5e:	f000 b8c0 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	200032e1 	.word	0x200032e1

08006b68 <__sinit_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sinit_lock_acquire+0x8>)
 8006b6a:	f000 b8b9 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	200032e2 	.word	0x200032e2

08006b74 <__sinit_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sinit_lock_release+0x8>)
 8006b76:	f000 b8b4 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	200032e2 	.word	0x200032e2

08006b80 <__sinit>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7ff fff0 	bl	8006b68 <__sinit_lock_acquire>
 8006b88:	69a3      	ldr	r3, [r4, #24]
 8006b8a:	b11b      	cbz	r3, 8006b94 <__sinit+0x14>
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f7ff bff0 	b.w	8006b74 <__sinit_lock_release>
 8006b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b98:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <__sinit+0x68>)
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <__sinit+0x6c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	bf04      	itt	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	61a3      	streq	r3, [r4, #24]
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f820 	bl	8006bf0 <__sfp>
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f81c 	bl	8006bf0 <__sfp>
 8006bb8:	60a0      	str	r0, [r4, #8]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f818 	bl	8006bf0 <__sfp>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	60e0      	str	r0, [r4, #12]
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	6860      	ldr	r0, [r4, #4]
 8006bc8:	f7ff ff82 	bl	8006ad0 <std>
 8006bcc:	68a0      	ldr	r0, [r4, #8]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2109      	movs	r1, #9
 8006bd2:	f7ff ff7d 	bl	8006ad0 <std>
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	2112      	movs	r1, #18
 8006bdc:	f7ff ff78 	bl	8006ad0 <std>
 8006be0:	2301      	movs	r3, #1
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	e7d2      	b.n	8006b8c <__sinit+0xc>
 8006be6:	bf00      	nop
 8006be8:	080076b8 	.word	0x080076b8
 8006bec:	08006b19 	.word	0x08006b19

08006bf0 <__sfp>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	f7ff ffac 	bl	8006b50 <__sfp_lock_acquire>
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <__sfp+0x84>)
 8006bfa:	681e      	ldr	r6, [r3, #0]
 8006bfc:	69b3      	ldr	r3, [r6, #24]
 8006bfe:	b913      	cbnz	r3, 8006c06 <__sfp+0x16>
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff ffbd 	bl	8006b80 <__sinit>
 8006c06:	3648      	adds	r6, #72	; 0x48
 8006c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	d503      	bpl.n	8006c18 <__sfp+0x28>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	b30b      	cbz	r3, 8006c58 <__sfp+0x68>
 8006c14:	6836      	ldr	r6, [r6, #0]
 8006c16:	e7f7      	b.n	8006c08 <__sfp+0x18>
 8006c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c1c:	b9d5      	cbnz	r5, 8006c54 <__sfp+0x64>
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <__sfp+0x88>)
 8006c20:	60e3      	str	r3, [r4, #12]
 8006c22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c26:	6665      	str	r5, [r4, #100]	; 0x64
 8006c28:	f000 f859 	bl	8006cde <__retarget_lock_init_recursive>
 8006c2c:	f7ff ff96 	bl	8006b5c <__sfp_lock_release>
 8006c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	61a5      	str	r5, [r4, #24]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c44:	f7ff fb84 	bl	8006350 <memset>
 8006c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c50:	4620      	mov	r0, r4
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	3468      	adds	r4, #104	; 0x68
 8006c56:	e7d9      	b.n	8006c0c <__sfp+0x1c>
 8006c58:	2104      	movs	r1, #4
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff ff62 	bl	8006b24 <__sfmoreglue>
 8006c60:	4604      	mov	r4, r0
 8006c62:	6030      	str	r0, [r6, #0]
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d1d5      	bne.n	8006c14 <__sfp+0x24>
 8006c68:	f7ff ff78 	bl	8006b5c <__sfp_lock_release>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	e7ee      	b.n	8006c50 <__sfp+0x60>
 8006c72:	bf00      	nop
 8006c74:	080076b8 	.word	0x080076b8
 8006c78:	ffff0001 	.word	0xffff0001

08006c7c <fiprintf>:
 8006c7c:	b40e      	push	{r1, r2, r3}
 8006c7e:	b503      	push	{r0, r1, lr}
 8006c80:	4601      	mov	r1, r0
 8006c82:	ab03      	add	r3, sp, #12
 8006c84:	4805      	ldr	r0, [pc, #20]	; (8006c9c <fiprintf+0x20>)
 8006c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	9301      	str	r3, [sp, #4]
 8006c8e:	f000 f919 	bl	8006ec4 <_vfiprintf_r>
 8006c92:	b002      	add	sp, #8
 8006c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c98:	b003      	add	sp, #12
 8006c9a:	4770      	bx	lr
 8006c9c:	20000018 	.word	0x20000018

08006ca0 <_fwalk_reent>:
 8006ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	4688      	mov	r8, r1
 8006ca8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cac:	2700      	movs	r7, #0
 8006cae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cb2:	f1b9 0901 	subs.w	r9, r9, #1
 8006cb6:	d505      	bpl.n	8006cc4 <_fwalk_reent+0x24>
 8006cb8:	6824      	ldr	r4, [r4, #0]
 8006cba:	2c00      	cmp	r4, #0
 8006cbc:	d1f7      	bne.n	8006cae <_fwalk_reent+0xe>
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc4:	89ab      	ldrh	r3, [r5, #12]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d907      	bls.n	8006cda <_fwalk_reent+0x3a>
 8006cca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	d003      	beq.n	8006cda <_fwalk_reent+0x3a>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	47c0      	blx	r8
 8006cd8:	4307      	orrs	r7, r0
 8006cda:	3568      	adds	r5, #104	; 0x68
 8006cdc:	e7e9      	b.n	8006cb2 <_fwalk_reent+0x12>

08006cde <__retarget_lock_init_recursive>:
 8006cde:	4770      	bx	lr

08006ce0 <__retarget_lock_acquire_recursive>:
 8006ce0:	4770      	bx	lr

08006ce2 <__retarget_lock_release_recursive>:
 8006ce2:	4770      	bx	lr

08006ce4 <__swhatbuf_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	2900      	cmp	r1, #0
 8006cee:	b096      	sub	sp, #88	; 0x58
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	461d      	mov	r5, r3
 8006cf4:	da08      	bge.n	8006d08 <__swhatbuf_r+0x24>
 8006cf6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	061a      	lsls	r2, r3, #24
 8006d00:	d410      	bmi.n	8006d24 <__swhatbuf_r+0x40>
 8006d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d06:	e00e      	b.n	8006d26 <__swhatbuf_r+0x42>
 8006d08:	466a      	mov	r2, sp
 8006d0a:	f000 fc0d 	bl	8007528 <_fstat_r>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	dbf1      	blt.n	8006cf6 <__swhatbuf_r+0x12>
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d1c:	425a      	negs	r2, r3
 8006d1e:	415a      	adcs	r2, r3
 8006d20:	602a      	str	r2, [r5, #0]
 8006d22:	e7ee      	b.n	8006d02 <__swhatbuf_r+0x1e>
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	2000      	movs	r0, #0
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	b016      	add	sp, #88	; 0x58
 8006d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d30 <__smakebuf_r>:
 8006d30:	898b      	ldrh	r3, [r1, #12]
 8006d32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d34:	079d      	lsls	r5, r3, #30
 8006d36:	4606      	mov	r6, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	d507      	bpl.n	8006d4c <__smakebuf_r+0x1c>
 8006d3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	2301      	movs	r3, #1
 8006d46:	6163      	str	r3, [r4, #20]
 8006d48:	b002      	add	sp, #8
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	ab01      	add	r3, sp, #4
 8006d4e:	466a      	mov	r2, sp
 8006d50:	f7ff ffc8 	bl	8006ce4 <__swhatbuf_r>
 8006d54:	9900      	ldr	r1, [sp, #0]
 8006d56:	4605      	mov	r5, r0
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f7ff fb37 	bl	80063cc <_malloc_r>
 8006d5e:	b948      	cbnz	r0, 8006d74 <__smakebuf_r+0x44>
 8006d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d64:	059a      	lsls	r2, r3, #22
 8006d66:	d4ef      	bmi.n	8006d48 <__smakebuf_r+0x18>
 8006d68:	f023 0303 	bic.w	r3, r3, #3
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	81a3      	strh	r3, [r4, #12]
 8006d72:	e7e3      	b.n	8006d3c <__smakebuf_r+0xc>
 8006d74:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <__smakebuf_r+0x7c>)
 8006d76:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	6020      	str	r0, [r4, #0]
 8006d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d80:	81a3      	strh	r3, [r4, #12]
 8006d82:	9b00      	ldr	r3, [sp, #0]
 8006d84:	6163      	str	r3, [r4, #20]
 8006d86:	9b01      	ldr	r3, [sp, #4]
 8006d88:	6120      	str	r0, [r4, #16]
 8006d8a:	b15b      	cbz	r3, 8006da4 <__smakebuf_r+0x74>
 8006d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 fbdb 	bl	800754c <_isatty_r>
 8006d96:	b128      	cbz	r0, 8006da4 <__smakebuf_r+0x74>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	81a3      	strh	r3, [r4, #12]
 8006da4:	89a0      	ldrh	r0, [r4, #12]
 8006da6:	4305      	orrs	r5, r0
 8006da8:	81a5      	strh	r5, [r4, #12]
 8006daa:	e7cd      	b.n	8006d48 <__smakebuf_r+0x18>
 8006dac:	08006b19 	.word	0x08006b19

08006db0 <malloc>:
 8006db0:	4b02      	ldr	r3, [pc, #8]	; (8006dbc <malloc+0xc>)
 8006db2:	4601      	mov	r1, r0
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f7ff bb09 	b.w	80063cc <_malloc_r>
 8006dba:	bf00      	nop
 8006dbc:	20000018 	.word	0x20000018

08006dc0 <__malloc_lock>:
 8006dc0:	4801      	ldr	r0, [pc, #4]	; (8006dc8 <__malloc_lock+0x8>)
 8006dc2:	f7ff bf8d 	b.w	8006ce0 <__retarget_lock_acquire_recursive>
 8006dc6:	bf00      	nop
 8006dc8:	200032e0 	.word	0x200032e0

08006dcc <__malloc_unlock>:
 8006dcc:	4801      	ldr	r0, [pc, #4]	; (8006dd4 <__malloc_unlock+0x8>)
 8006dce:	f7ff bf88 	b.w	8006ce2 <__retarget_lock_release_recursive>
 8006dd2:	bf00      	nop
 8006dd4:	200032e0 	.word	0x200032e0

08006dd8 <_free_r>:
 8006dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dda:	2900      	cmp	r1, #0
 8006ddc:	d044      	beq.n	8006e68 <_free_r+0x90>
 8006dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de2:	9001      	str	r0, [sp, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dea:	bfb8      	it	lt
 8006dec:	18e4      	addlt	r4, r4, r3
 8006dee:	f7ff ffe7 	bl	8006dc0 <__malloc_lock>
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <_free_r+0x94>)
 8006df4:	9801      	ldr	r0, [sp, #4]
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	b933      	cbnz	r3, 8006e08 <_free_r+0x30>
 8006dfa:	6063      	str	r3, [r4, #4]
 8006dfc:	6014      	str	r4, [r2, #0]
 8006dfe:	b003      	add	sp, #12
 8006e00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e04:	f7ff bfe2 	b.w	8006dcc <__malloc_unlock>
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	d908      	bls.n	8006e1e <_free_r+0x46>
 8006e0c:	6825      	ldr	r5, [r4, #0]
 8006e0e:	1961      	adds	r1, r4, r5
 8006e10:	428b      	cmp	r3, r1
 8006e12:	bf01      	itttt	eq
 8006e14:	6819      	ldreq	r1, [r3, #0]
 8006e16:	685b      	ldreq	r3, [r3, #4]
 8006e18:	1949      	addeq	r1, r1, r5
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	e7ed      	b.n	8006dfa <_free_r+0x22>
 8006e1e:	461a      	mov	r2, r3
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b10b      	cbz	r3, 8006e28 <_free_r+0x50>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d9fa      	bls.n	8006e1e <_free_r+0x46>
 8006e28:	6811      	ldr	r1, [r2, #0]
 8006e2a:	1855      	adds	r5, r2, r1
 8006e2c:	42a5      	cmp	r5, r4
 8006e2e:	d10b      	bne.n	8006e48 <_free_r+0x70>
 8006e30:	6824      	ldr	r4, [r4, #0]
 8006e32:	4421      	add	r1, r4
 8006e34:	1854      	adds	r4, r2, r1
 8006e36:	42a3      	cmp	r3, r4
 8006e38:	6011      	str	r1, [r2, #0]
 8006e3a:	d1e0      	bne.n	8006dfe <_free_r+0x26>
 8006e3c:	681c      	ldr	r4, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	6053      	str	r3, [r2, #4]
 8006e42:	4421      	add	r1, r4
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	e7da      	b.n	8006dfe <_free_r+0x26>
 8006e48:	d902      	bls.n	8006e50 <_free_r+0x78>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	6003      	str	r3, [r0, #0]
 8006e4e:	e7d6      	b.n	8006dfe <_free_r+0x26>
 8006e50:	6825      	ldr	r5, [r4, #0]
 8006e52:	1961      	adds	r1, r4, r5
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf04      	itt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	bf04      	itt	eq
 8006e60:	1949      	addeq	r1, r1, r5
 8006e62:	6021      	streq	r1, [r4, #0]
 8006e64:	6054      	str	r4, [r2, #4]
 8006e66:	e7ca      	b.n	8006dfe <_free_r+0x26>
 8006e68:	b003      	add	sp, #12
 8006e6a:	bd30      	pop	{r4, r5, pc}
 8006e6c:	200032d8 	.word	0x200032d8

08006e70 <__sfputc_r>:
 8006e70:	6893      	ldr	r3, [r2, #8]
 8006e72:	3b01      	subs	r3, #1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	b410      	push	{r4}
 8006e78:	6093      	str	r3, [r2, #8]
 8006e7a:	da08      	bge.n	8006e8e <__sfputc_r+0x1e>
 8006e7c:	6994      	ldr	r4, [r2, #24]
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	db01      	blt.n	8006e86 <__sfputc_r+0x16>
 8006e82:	290a      	cmp	r1, #10
 8006e84:	d103      	bne.n	8006e8e <__sfputc_r+0x1e>
 8006e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e8a:	f7ff bc81 	b.w	8006790 <__swbuf_r>
 8006e8e:	6813      	ldr	r3, [r2, #0]
 8006e90:	1c58      	adds	r0, r3, #1
 8006e92:	6010      	str	r0, [r2, #0]
 8006e94:	7019      	strb	r1, [r3, #0]
 8006e96:	4608      	mov	r0, r1
 8006e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <__sfputs_r>:
 8006e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	460f      	mov	r7, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	18d5      	adds	r5, r2, r3
 8006ea8:	42ac      	cmp	r4, r5
 8006eaa:	d101      	bne.n	8006eb0 <__sfputs_r+0x12>
 8006eac:	2000      	movs	r0, #0
 8006eae:	e007      	b.n	8006ec0 <__sfputs_r+0x22>
 8006eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ffda 	bl	8006e70 <__sfputc_r>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d1f3      	bne.n	8006ea8 <__sfputs_r+0xa>
 8006ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ec4 <_vfiprintf_r>:
 8006ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec8:	460d      	mov	r5, r1
 8006eca:	b09d      	sub	sp, #116	; 0x74
 8006ecc:	4614      	mov	r4, r2
 8006ece:	4698      	mov	r8, r3
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	b118      	cbz	r0, 8006edc <_vfiprintf_r+0x18>
 8006ed4:	6983      	ldr	r3, [r0, #24]
 8006ed6:	b90b      	cbnz	r3, 8006edc <_vfiprintf_r+0x18>
 8006ed8:	f7ff fe52 	bl	8006b80 <__sinit>
 8006edc:	4b89      	ldr	r3, [pc, #548]	; (8007104 <_vfiprintf_r+0x240>)
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	d11b      	bne.n	8006f1a <_vfiprintf_r+0x56>
 8006ee2:	6875      	ldr	r5, [r6, #4]
 8006ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d405      	bmi.n	8006ef6 <_vfiprintf_r+0x32>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_vfiprintf_r+0x32>
 8006ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef2:	f7ff fef5 	bl	8006ce0 <__retarget_lock_acquire_recursive>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	071b      	lsls	r3, r3, #28
 8006efa:	d501      	bpl.n	8006f00 <_vfiprintf_r+0x3c>
 8006efc:	692b      	ldr	r3, [r5, #16]
 8006efe:	b9eb      	cbnz	r3, 8006f3c <_vfiprintf_r+0x78>
 8006f00:	4629      	mov	r1, r5
 8006f02:	4630      	mov	r0, r6
 8006f04:	f7ff fc96 	bl	8006834 <__swsetup_r>
 8006f08:	b1c0      	cbz	r0, 8006f3c <_vfiprintf_r+0x78>
 8006f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f0c:	07dc      	lsls	r4, r3, #31
 8006f0e:	d50e      	bpl.n	8006f2e <_vfiprintf_r+0x6a>
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	b01d      	add	sp, #116	; 0x74
 8006f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f1a:	4b7b      	ldr	r3, [pc, #492]	; (8007108 <_vfiprintf_r+0x244>)
 8006f1c:	429d      	cmp	r5, r3
 8006f1e:	d101      	bne.n	8006f24 <_vfiprintf_r+0x60>
 8006f20:	68b5      	ldr	r5, [r6, #8]
 8006f22:	e7df      	b.n	8006ee4 <_vfiprintf_r+0x20>
 8006f24:	4b79      	ldr	r3, [pc, #484]	; (800710c <_vfiprintf_r+0x248>)
 8006f26:	429d      	cmp	r5, r3
 8006f28:	bf08      	it	eq
 8006f2a:	68f5      	ldreq	r5, [r6, #12]
 8006f2c:	e7da      	b.n	8006ee4 <_vfiprintf_r+0x20>
 8006f2e:	89ab      	ldrh	r3, [r5, #12]
 8006f30:	0598      	lsls	r0, r3, #22
 8006f32:	d4ed      	bmi.n	8006f10 <_vfiprintf_r+0x4c>
 8006f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f36:	f7ff fed4 	bl	8006ce2 <__retarget_lock_release_recursive>
 8006f3a:	e7e9      	b.n	8006f10 <_vfiprintf_r+0x4c>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f40:	2320      	movs	r3, #32
 8006f42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f46:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f4a:	2330      	movs	r3, #48	; 0x30
 8006f4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007110 <_vfiprintf_r+0x24c>
 8006f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f54:	f04f 0901 	mov.w	r9, #1
 8006f58:	4623      	mov	r3, r4
 8006f5a:	469a      	mov	sl, r3
 8006f5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f60:	b10a      	cbz	r2, 8006f66 <_vfiprintf_r+0xa2>
 8006f62:	2a25      	cmp	r2, #37	; 0x25
 8006f64:	d1f9      	bne.n	8006f5a <_vfiprintf_r+0x96>
 8006f66:	ebba 0b04 	subs.w	fp, sl, r4
 8006f6a:	d00b      	beq.n	8006f84 <_vfiprintf_r+0xc0>
 8006f6c:	465b      	mov	r3, fp
 8006f6e:	4622      	mov	r2, r4
 8006f70:	4629      	mov	r1, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	f7ff ff93 	bl	8006e9e <__sfputs_r>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f000 80aa 	beq.w	80070d2 <_vfiprintf_r+0x20e>
 8006f7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f80:	445a      	add	r2, fp
 8006f82:	9209      	str	r2, [sp, #36]	; 0x24
 8006f84:	f89a 3000 	ldrb.w	r3, [sl]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80a2 	beq.w	80070d2 <_vfiprintf_r+0x20e>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
 8006f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f98:	f10a 0a01 	add.w	sl, sl, #1
 8006f9c:	9304      	str	r3, [sp, #16]
 8006f9e:	9307      	str	r3, [sp, #28]
 8006fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fa4:	931a      	str	r3, [sp, #104]	; 0x68
 8006fa6:	4654      	mov	r4, sl
 8006fa8:	2205      	movs	r2, #5
 8006faa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fae:	4858      	ldr	r0, [pc, #352]	; (8007110 <_vfiprintf_r+0x24c>)
 8006fb0:	f7f9 f926 	bl	8000200 <memchr>
 8006fb4:	9a04      	ldr	r2, [sp, #16]
 8006fb6:	b9d8      	cbnz	r0, 8006ff0 <_vfiprintf_r+0x12c>
 8006fb8:	06d1      	lsls	r1, r2, #27
 8006fba:	bf44      	itt	mi
 8006fbc:	2320      	movmi	r3, #32
 8006fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc2:	0713      	lsls	r3, r2, #28
 8006fc4:	bf44      	itt	mi
 8006fc6:	232b      	movmi	r3, #43	; 0x2b
 8006fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fd2:	d015      	beq.n	8007000 <_vfiprintf_r+0x13c>
 8006fd4:	9a07      	ldr	r2, [sp, #28]
 8006fd6:	4654      	mov	r4, sl
 8006fd8:	2000      	movs	r0, #0
 8006fda:	f04f 0c0a 	mov.w	ip, #10
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fe4:	3b30      	subs	r3, #48	; 0x30
 8006fe6:	2b09      	cmp	r3, #9
 8006fe8:	d94e      	bls.n	8007088 <_vfiprintf_r+0x1c4>
 8006fea:	b1b0      	cbz	r0, 800701a <_vfiprintf_r+0x156>
 8006fec:	9207      	str	r2, [sp, #28]
 8006fee:	e014      	b.n	800701a <_vfiprintf_r+0x156>
 8006ff0:	eba0 0308 	sub.w	r3, r0, r8
 8006ff4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	9304      	str	r3, [sp, #16]
 8006ffc:	46a2      	mov	sl, r4
 8006ffe:	e7d2      	b.n	8006fa6 <_vfiprintf_r+0xe2>
 8007000:	9b03      	ldr	r3, [sp, #12]
 8007002:	1d19      	adds	r1, r3, #4
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	9103      	str	r1, [sp, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	bfbb      	ittet	lt
 800700c:	425b      	neglt	r3, r3
 800700e:	f042 0202 	orrlt.w	r2, r2, #2
 8007012:	9307      	strge	r3, [sp, #28]
 8007014:	9307      	strlt	r3, [sp, #28]
 8007016:	bfb8      	it	lt
 8007018:	9204      	strlt	r2, [sp, #16]
 800701a:	7823      	ldrb	r3, [r4, #0]
 800701c:	2b2e      	cmp	r3, #46	; 0x2e
 800701e:	d10c      	bne.n	800703a <_vfiprintf_r+0x176>
 8007020:	7863      	ldrb	r3, [r4, #1]
 8007022:	2b2a      	cmp	r3, #42	; 0x2a
 8007024:	d135      	bne.n	8007092 <_vfiprintf_r+0x1ce>
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	1d1a      	adds	r2, r3, #4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	9203      	str	r2, [sp, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	bfb8      	it	lt
 8007032:	f04f 33ff 	movlt.w	r3, #4294967295
 8007036:	3402      	adds	r4, #2
 8007038:	9305      	str	r3, [sp, #20]
 800703a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007120 <_vfiprintf_r+0x25c>
 800703e:	7821      	ldrb	r1, [r4, #0]
 8007040:	2203      	movs	r2, #3
 8007042:	4650      	mov	r0, sl
 8007044:	f7f9 f8dc 	bl	8000200 <memchr>
 8007048:	b140      	cbz	r0, 800705c <_vfiprintf_r+0x198>
 800704a:	2340      	movs	r3, #64	; 0x40
 800704c:	eba0 000a 	sub.w	r0, r0, sl
 8007050:	fa03 f000 	lsl.w	r0, r3, r0
 8007054:	9b04      	ldr	r3, [sp, #16]
 8007056:	4303      	orrs	r3, r0
 8007058:	3401      	adds	r4, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007060:	482c      	ldr	r0, [pc, #176]	; (8007114 <_vfiprintf_r+0x250>)
 8007062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007066:	2206      	movs	r2, #6
 8007068:	f7f9 f8ca 	bl	8000200 <memchr>
 800706c:	2800      	cmp	r0, #0
 800706e:	d03f      	beq.n	80070f0 <_vfiprintf_r+0x22c>
 8007070:	4b29      	ldr	r3, [pc, #164]	; (8007118 <_vfiprintf_r+0x254>)
 8007072:	bb1b      	cbnz	r3, 80070bc <_vfiprintf_r+0x1f8>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	3307      	adds	r3, #7
 8007078:	f023 0307 	bic.w	r3, r3, #7
 800707c:	3308      	adds	r3, #8
 800707e:	9303      	str	r3, [sp, #12]
 8007080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007082:	443b      	add	r3, r7
 8007084:	9309      	str	r3, [sp, #36]	; 0x24
 8007086:	e767      	b.n	8006f58 <_vfiprintf_r+0x94>
 8007088:	fb0c 3202 	mla	r2, ip, r2, r3
 800708c:	460c      	mov	r4, r1
 800708e:	2001      	movs	r0, #1
 8007090:	e7a5      	b.n	8006fde <_vfiprintf_r+0x11a>
 8007092:	2300      	movs	r3, #0
 8007094:	3401      	adds	r4, #1
 8007096:	9305      	str	r3, [sp, #20]
 8007098:	4619      	mov	r1, r3
 800709a:	f04f 0c0a 	mov.w	ip, #10
 800709e:	4620      	mov	r0, r4
 80070a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070a4:	3a30      	subs	r2, #48	; 0x30
 80070a6:	2a09      	cmp	r2, #9
 80070a8:	d903      	bls.n	80070b2 <_vfiprintf_r+0x1ee>
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0c5      	beq.n	800703a <_vfiprintf_r+0x176>
 80070ae:	9105      	str	r1, [sp, #20]
 80070b0:	e7c3      	b.n	800703a <_vfiprintf_r+0x176>
 80070b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80070b6:	4604      	mov	r4, r0
 80070b8:	2301      	movs	r3, #1
 80070ba:	e7f0      	b.n	800709e <_vfiprintf_r+0x1da>
 80070bc:	ab03      	add	r3, sp, #12
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <_vfiprintf_r+0x258>)
 80070c4:	a904      	add	r1, sp, #16
 80070c6:	4630      	mov	r0, r6
 80070c8:	f3af 8000 	nop.w
 80070cc:	4607      	mov	r7, r0
 80070ce:	1c78      	adds	r0, r7, #1
 80070d0:	d1d6      	bne.n	8007080 <_vfiprintf_r+0x1bc>
 80070d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d4:	07d9      	lsls	r1, r3, #31
 80070d6:	d405      	bmi.n	80070e4 <_vfiprintf_r+0x220>
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	059a      	lsls	r2, r3, #22
 80070dc:	d402      	bmi.n	80070e4 <_vfiprintf_r+0x220>
 80070de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070e0:	f7ff fdff 	bl	8006ce2 <__retarget_lock_release_recursive>
 80070e4:	89ab      	ldrh	r3, [r5, #12]
 80070e6:	065b      	lsls	r3, r3, #25
 80070e8:	f53f af12 	bmi.w	8006f10 <_vfiprintf_r+0x4c>
 80070ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070ee:	e711      	b.n	8006f14 <_vfiprintf_r+0x50>
 80070f0:	ab03      	add	r3, sp, #12
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	462a      	mov	r2, r5
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <_vfiprintf_r+0x258>)
 80070f8:	a904      	add	r1, sp, #16
 80070fa:	4630      	mov	r0, r6
 80070fc:	f000 f880 	bl	8007200 <_printf_i>
 8007100:	e7e4      	b.n	80070cc <_vfiprintf_r+0x208>
 8007102:	bf00      	nop
 8007104:	08007890 	.word	0x08007890
 8007108:	080078b0 	.word	0x080078b0
 800710c:	08007870 	.word	0x08007870
 8007110:	080078d0 	.word	0x080078d0
 8007114:	080078da 	.word	0x080078da
 8007118:	00000000 	.word	0x00000000
 800711c:	08006e9f 	.word	0x08006e9f
 8007120:	080078d6 	.word	0x080078d6

08007124 <_printf_common>:
 8007124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007128:	4616      	mov	r6, r2
 800712a:	4699      	mov	r9, r3
 800712c:	688a      	ldr	r2, [r1, #8]
 800712e:	690b      	ldr	r3, [r1, #16]
 8007130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007134:	4293      	cmp	r3, r2
 8007136:	bfb8      	it	lt
 8007138:	4613      	movlt	r3, r2
 800713a:	6033      	str	r3, [r6, #0]
 800713c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007140:	4607      	mov	r7, r0
 8007142:	460c      	mov	r4, r1
 8007144:	b10a      	cbz	r2, 800714a <_printf_common+0x26>
 8007146:	3301      	adds	r3, #1
 8007148:	6033      	str	r3, [r6, #0]
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	0699      	lsls	r1, r3, #26
 800714e:	bf42      	ittt	mi
 8007150:	6833      	ldrmi	r3, [r6, #0]
 8007152:	3302      	addmi	r3, #2
 8007154:	6033      	strmi	r3, [r6, #0]
 8007156:	6825      	ldr	r5, [r4, #0]
 8007158:	f015 0506 	ands.w	r5, r5, #6
 800715c:	d106      	bne.n	800716c <_printf_common+0x48>
 800715e:	f104 0a19 	add.w	sl, r4, #25
 8007162:	68e3      	ldr	r3, [r4, #12]
 8007164:	6832      	ldr	r2, [r6, #0]
 8007166:	1a9b      	subs	r3, r3, r2
 8007168:	42ab      	cmp	r3, r5
 800716a:	dc26      	bgt.n	80071ba <_printf_common+0x96>
 800716c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007170:	1e13      	subs	r3, r2, #0
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	bf18      	it	ne
 8007176:	2301      	movne	r3, #1
 8007178:	0692      	lsls	r2, r2, #26
 800717a:	d42b      	bmi.n	80071d4 <_printf_common+0xb0>
 800717c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007180:	4649      	mov	r1, r9
 8007182:	4638      	mov	r0, r7
 8007184:	47c0      	blx	r8
 8007186:	3001      	adds	r0, #1
 8007188:	d01e      	beq.n	80071c8 <_printf_common+0xa4>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	68e5      	ldr	r5, [r4, #12]
 800718e:	6832      	ldr	r2, [r6, #0]
 8007190:	f003 0306 	and.w	r3, r3, #6
 8007194:	2b04      	cmp	r3, #4
 8007196:	bf08      	it	eq
 8007198:	1aad      	subeq	r5, r5, r2
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	6922      	ldr	r2, [r4, #16]
 800719e:	bf0c      	ite	eq
 80071a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071a4:	2500      	movne	r5, #0
 80071a6:	4293      	cmp	r3, r2
 80071a8:	bfc4      	itt	gt
 80071aa:	1a9b      	subgt	r3, r3, r2
 80071ac:	18ed      	addgt	r5, r5, r3
 80071ae:	2600      	movs	r6, #0
 80071b0:	341a      	adds	r4, #26
 80071b2:	42b5      	cmp	r5, r6
 80071b4:	d11a      	bne.n	80071ec <_printf_common+0xc8>
 80071b6:	2000      	movs	r0, #0
 80071b8:	e008      	b.n	80071cc <_printf_common+0xa8>
 80071ba:	2301      	movs	r3, #1
 80071bc:	4652      	mov	r2, sl
 80071be:	4649      	mov	r1, r9
 80071c0:	4638      	mov	r0, r7
 80071c2:	47c0      	blx	r8
 80071c4:	3001      	adds	r0, #1
 80071c6:	d103      	bne.n	80071d0 <_printf_common+0xac>
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d0:	3501      	adds	r5, #1
 80071d2:	e7c6      	b.n	8007162 <_printf_common+0x3e>
 80071d4:	18e1      	adds	r1, r4, r3
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	2030      	movs	r0, #48	; 0x30
 80071da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071de:	4422      	add	r2, r4
 80071e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071e8:	3302      	adds	r3, #2
 80071ea:	e7c7      	b.n	800717c <_printf_common+0x58>
 80071ec:	2301      	movs	r3, #1
 80071ee:	4622      	mov	r2, r4
 80071f0:	4649      	mov	r1, r9
 80071f2:	4638      	mov	r0, r7
 80071f4:	47c0      	blx	r8
 80071f6:	3001      	adds	r0, #1
 80071f8:	d0e6      	beq.n	80071c8 <_printf_common+0xa4>
 80071fa:	3601      	adds	r6, #1
 80071fc:	e7d9      	b.n	80071b2 <_printf_common+0x8e>
	...

08007200 <_printf_i>:
 8007200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	7e0f      	ldrb	r7, [r1, #24]
 8007206:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007208:	2f78      	cmp	r7, #120	; 0x78
 800720a:	4691      	mov	r9, r2
 800720c:	4680      	mov	r8, r0
 800720e:	460c      	mov	r4, r1
 8007210:	469a      	mov	sl, r3
 8007212:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007216:	d807      	bhi.n	8007228 <_printf_i+0x28>
 8007218:	2f62      	cmp	r7, #98	; 0x62
 800721a:	d80a      	bhi.n	8007232 <_printf_i+0x32>
 800721c:	2f00      	cmp	r7, #0
 800721e:	f000 80d8 	beq.w	80073d2 <_printf_i+0x1d2>
 8007222:	2f58      	cmp	r7, #88	; 0x58
 8007224:	f000 80a3 	beq.w	800736e <_printf_i+0x16e>
 8007228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800722c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007230:	e03a      	b.n	80072a8 <_printf_i+0xa8>
 8007232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007236:	2b15      	cmp	r3, #21
 8007238:	d8f6      	bhi.n	8007228 <_printf_i+0x28>
 800723a:	a101      	add	r1, pc, #4	; (adr r1, 8007240 <_printf_i+0x40>)
 800723c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007240:	08007299 	.word	0x08007299
 8007244:	080072ad 	.word	0x080072ad
 8007248:	08007229 	.word	0x08007229
 800724c:	08007229 	.word	0x08007229
 8007250:	08007229 	.word	0x08007229
 8007254:	08007229 	.word	0x08007229
 8007258:	080072ad 	.word	0x080072ad
 800725c:	08007229 	.word	0x08007229
 8007260:	08007229 	.word	0x08007229
 8007264:	08007229 	.word	0x08007229
 8007268:	08007229 	.word	0x08007229
 800726c:	080073b9 	.word	0x080073b9
 8007270:	080072dd 	.word	0x080072dd
 8007274:	0800739b 	.word	0x0800739b
 8007278:	08007229 	.word	0x08007229
 800727c:	08007229 	.word	0x08007229
 8007280:	080073db 	.word	0x080073db
 8007284:	08007229 	.word	0x08007229
 8007288:	080072dd 	.word	0x080072dd
 800728c:	08007229 	.word	0x08007229
 8007290:	08007229 	.word	0x08007229
 8007294:	080073a3 	.word	0x080073a3
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	1d1a      	adds	r2, r3, #4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	602a      	str	r2, [r5, #0]
 80072a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072a8:	2301      	movs	r3, #1
 80072aa:	e0a3      	b.n	80073f4 <_printf_i+0x1f4>
 80072ac:	6820      	ldr	r0, [r4, #0]
 80072ae:	6829      	ldr	r1, [r5, #0]
 80072b0:	0606      	lsls	r6, r0, #24
 80072b2:	f101 0304 	add.w	r3, r1, #4
 80072b6:	d50a      	bpl.n	80072ce <_printf_i+0xce>
 80072b8:	680e      	ldr	r6, [r1, #0]
 80072ba:	602b      	str	r3, [r5, #0]
 80072bc:	2e00      	cmp	r6, #0
 80072be:	da03      	bge.n	80072c8 <_printf_i+0xc8>
 80072c0:	232d      	movs	r3, #45	; 0x2d
 80072c2:	4276      	negs	r6, r6
 80072c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c8:	485e      	ldr	r0, [pc, #376]	; (8007444 <_printf_i+0x244>)
 80072ca:	230a      	movs	r3, #10
 80072cc:	e019      	b.n	8007302 <_printf_i+0x102>
 80072ce:	680e      	ldr	r6, [r1, #0]
 80072d0:	602b      	str	r3, [r5, #0]
 80072d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072d6:	bf18      	it	ne
 80072d8:	b236      	sxthne	r6, r6
 80072da:	e7ef      	b.n	80072bc <_printf_i+0xbc>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	6820      	ldr	r0, [r4, #0]
 80072e0:	1d19      	adds	r1, r3, #4
 80072e2:	6029      	str	r1, [r5, #0]
 80072e4:	0601      	lsls	r1, r0, #24
 80072e6:	d501      	bpl.n	80072ec <_printf_i+0xec>
 80072e8:	681e      	ldr	r6, [r3, #0]
 80072ea:	e002      	b.n	80072f2 <_printf_i+0xf2>
 80072ec:	0646      	lsls	r6, r0, #25
 80072ee:	d5fb      	bpl.n	80072e8 <_printf_i+0xe8>
 80072f0:	881e      	ldrh	r6, [r3, #0]
 80072f2:	4854      	ldr	r0, [pc, #336]	; (8007444 <_printf_i+0x244>)
 80072f4:	2f6f      	cmp	r7, #111	; 0x6f
 80072f6:	bf0c      	ite	eq
 80072f8:	2308      	moveq	r3, #8
 80072fa:	230a      	movne	r3, #10
 80072fc:	2100      	movs	r1, #0
 80072fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007302:	6865      	ldr	r5, [r4, #4]
 8007304:	60a5      	str	r5, [r4, #8]
 8007306:	2d00      	cmp	r5, #0
 8007308:	bfa2      	ittt	ge
 800730a:	6821      	ldrge	r1, [r4, #0]
 800730c:	f021 0104 	bicge.w	r1, r1, #4
 8007310:	6021      	strge	r1, [r4, #0]
 8007312:	b90e      	cbnz	r6, 8007318 <_printf_i+0x118>
 8007314:	2d00      	cmp	r5, #0
 8007316:	d04d      	beq.n	80073b4 <_printf_i+0x1b4>
 8007318:	4615      	mov	r5, r2
 800731a:	fbb6 f1f3 	udiv	r1, r6, r3
 800731e:	fb03 6711 	mls	r7, r3, r1, r6
 8007322:	5dc7      	ldrb	r7, [r0, r7]
 8007324:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007328:	4637      	mov	r7, r6
 800732a:	42bb      	cmp	r3, r7
 800732c:	460e      	mov	r6, r1
 800732e:	d9f4      	bls.n	800731a <_printf_i+0x11a>
 8007330:	2b08      	cmp	r3, #8
 8007332:	d10b      	bne.n	800734c <_printf_i+0x14c>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	07de      	lsls	r6, r3, #31
 8007338:	d508      	bpl.n	800734c <_printf_i+0x14c>
 800733a:	6923      	ldr	r3, [r4, #16]
 800733c:	6861      	ldr	r1, [r4, #4]
 800733e:	4299      	cmp	r1, r3
 8007340:	bfde      	ittt	le
 8007342:	2330      	movle	r3, #48	; 0x30
 8007344:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007348:	f105 35ff 	addle.w	r5, r5, #4294967295
 800734c:	1b52      	subs	r2, r2, r5
 800734e:	6122      	str	r2, [r4, #16]
 8007350:	f8cd a000 	str.w	sl, [sp]
 8007354:	464b      	mov	r3, r9
 8007356:	aa03      	add	r2, sp, #12
 8007358:	4621      	mov	r1, r4
 800735a:	4640      	mov	r0, r8
 800735c:	f7ff fee2 	bl	8007124 <_printf_common>
 8007360:	3001      	adds	r0, #1
 8007362:	d14c      	bne.n	80073fe <_printf_i+0x1fe>
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	b004      	add	sp, #16
 800736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736e:	4835      	ldr	r0, [pc, #212]	; (8007444 <_printf_i+0x244>)
 8007370:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007374:	6829      	ldr	r1, [r5, #0]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	f851 6b04 	ldr.w	r6, [r1], #4
 800737c:	6029      	str	r1, [r5, #0]
 800737e:	061d      	lsls	r5, r3, #24
 8007380:	d514      	bpl.n	80073ac <_printf_i+0x1ac>
 8007382:	07df      	lsls	r7, r3, #31
 8007384:	bf44      	itt	mi
 8007386:	f043 0320 	orrmi.w	r3, r3, #32
 800738a:	6023      	strmi	r3, [r4, #0]
 800738c:	b91e      	cbnz	r6, 8007396 <_printf_i+0x196>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f023 0320 	bic.w	r3, r3, #32
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	2310      	movs	r3, #16
 8007398:	e7b0      	b.n	80072fc <_printf_i+0xfc>
 800739a:	6823      	ldr	r3, [r4, #0]
 800739c:	f043 0320 	orr.w	r3, r3, #32
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	2378      	movs	r3, #120	; 0x78
 80073a4:	4828      	ldr	r0, [pc, #160]	; (8007448 <_printf_i+0x248>)
 80073a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073aa:	e7e3      	b.n	8007374 <_printf_i+0x174>
 80073ac:	0659      	lsls	r1, r3, #25
 80073ae:	bf48      	it	mi
 80073b0:	b2b6      	uxthmi	r6, r6
 80073b2:	e7e6      	b.n	8007382 <_printf_i+0x182>
 80073b4:	4615      	mov	r5, r2
 80073b6:	e7bb      	b.n	8007330 <_printf_i+0x130>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	6826      	ldr	r6, [r4, #0]
 80073bc:	6961      	ldr	r1, [r4, #20]
 80073be:	1d18      	adds	r0, r3, #4
 80073c0:	6028      	str	r0, [r5, #0]
 80073c2:	0635      	lsls	r5, r6, #24
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	d501      	bpl.n	80073cc <_printf_i+0x1cc>
 80073c8:	6019      	str	r1, [r3, #0]
 80073ca:	e002      	b.n	80073d2 <_printf_i+0x1d2>
 80073cc:	0670      	lsls	r0, r6, #25
 80073ce:	d5fb      	bpl.n	80073c8 <_printf_i+0x1c8>
 80073d0:	8019      	strh	r1, [r3, #0]
 80073d2:	2300      	movs	r3, #0
 80073d4:	6123      	str	r3, [r4, #16]
 80073d6:	4615      	mov	r5, r2
 80073d8:	e7ba      	b.n	8007350 <_printf_i+0x150>
 80073da:	682b      	ldr	r3, [r5, #0]
 80073dc:	1d1a      	adds	r2, r3, #4
 80073de:	602a      	str	r2, [r5, #0]
 80073e0:	681d      	ldr	r5, [r3, #0]
 80073e2:	6862      	ldr	r2, [r4, #4]
 80073e4:	2100      	movs	r1, #0
 80073e6:	4628      	mov	r0, r5
 80073e8:	f7f8 ff0a 	bl	8000200 <memchr>
 80073ec:	b108      	cbz	r0, 80073f2 <_printf_i+0x1f2>
 80073ee:	1b40      	subs	r0, r0, r5
 80073f0:	6060      	str	r0, [r4, #4]
 80073f2:	6863      	ldr	r3, [r4, #4]
 80073f4:	6123      	str	r3, [r4, #16]
 80073f6:	2300      	movs	r3, #0
 80073f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073fc:	e7a8      	b.n	8007350 <_printf_i+0x150>
 80073fe:	6923      	ldr	r3, [r4, #16]
 8007400:	462a      	mov	r2, r5
 8007402:	4649      	mov	r1, r9
 8007404:	4640      	mov	r0, r8
 8007406:	47d0      	blx	sl
 8007408:	3001      	adds	r0, #1
 800740a:	d0ab      	beq.n	8007364 <_printf_i+0x164>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	079b      	lsls	r3, r3, #30
 8007410:	d413      	bmi.n	800743a <_printf_i+0x23a>
 8007412:	68e0      	ldr	r0, [r4, #12]
 8007414:	9b03      	ldr	r3, [sp, #12]
 8007416:	4298      	cmp	r0, r3
 8007418:	bfb8      	it	lt
 800741a:	4618      	movlt	r0, r3
 800741c:	e7a4      	b.n	8007368 <_printf_i+0x168>
 800741e:	2301      	movs	r3, #1
 8007420:	4632      	mov	r2, r6
 8007422:	4649      	mov	r1, r9
 8007424:	4640      	mov	r0, r8
 8007426:	47d0      	blx	sl
 8007428:	3001      	adds	r0, #1
 800742a:	d09b      	beq.n	8007364 <_printf_i+0x164>
 800742c:	3501      	adds	r5, #1
 800742e:	68e3      	ldr	r3, [r4, #12]
 8007430:	9903      	ldr	r1, [sp, #12]
 8007432:	1a5b      	subs	r3, r3, r1
 8007434:	42ab      	cmp	r3, r5
 8007436:	dcf2      	bgt.n	800741e <_printf_i+0x21e>
 8007438:	e7eb      	b.n	8007412 <_printf_i+0x212>
 800743a:	2500      	movs	r5, #0
 800743c:	f104 0619 	add.w	r6, r4, #25
 8007440:	e7f5      	b.n	800742e <_printf_i+0x22e>
 8007442:	bf00      	nop
 8007444:	080078e1 	.word	0x080078e1
 8007448:	080078f2 	.word	0x080078f2

0800744c <__sread>:
 800744c:	b510      	push	{r4, lr}
 800744e:	460c      	mov	r4, r1
 8007450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007454:	f000 f89c 	bl	8007590 <_read_r>
 8007458:	2800      	cmp	r0, #0
 800745a:	bfab      	itete	ge
 800745c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800745e:	89a3      	ldrhlt	r3, [r4, #12]
 8007460:	181b      	addge	r3, r3, r0
 8007462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007466:	bfac      	ite	ge
 8007468:	6563      	strge	r3, [r4, #84]	; 0x54
 800746a:	81a3      	strhlt	r3, [r4, #12]
 800746c:	bd10      	pop	{r4, pc}

0800746e <__swrite>:
 800746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	461f      	mov	r7, r3
 8007474:	898b      	ldrh	r3, [r1, #12]
 8007476:	05db      	lsls	r3, r3, #23
 8007478:	4605      	mov	r5, r0
 800747a:	460c      	mov	r4, r1
 800747c:	4616      	mov	r6, r2
 800747e:	d505      	bpl.n	800748c <__swrite+0x1e>
 8007480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007484:	2302      	movs	r3, #2
 8007486:	2200      	movs	r2, #0
 8007488:	f000 f870 	bl	800756c <_lseek_r>
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007496:	81a3      	strh	r3, [r4, #12]
 8007498:	4632      	mov	r2, r6
 800749a:	463b      	mov	r3, r7
 800749c:	4628      	mov	r0, r5
 800749e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074a2:	f000 b817 	b.w	80074d4 <_write_r>

080074a6 <__sseek>:
 80074a6:	b510      	push	{r4, lr}
 80074a8:	460c      	mov	r4, r1
 80074aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ae:	f000 f85d 	bl	800756c <_lseek_r>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	bf15      	itete	ne
 80074b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074c2:	81a3      	strheq	r3, [r4, #12]
 80074c4:	bf18      	it	ne
 80074c6:	81a3      	strhne	r3, [r4, #12]
 80074c8:	bd10      	pop	{r4, pc}

080074ca <__sclose>:
 80074ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ce:	f000 b81b 	b.w	8007508 <_close_r>
	...

080074d4 <_write_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d07      	ldr	r5, [pc, #28]	; (80074f4 <_write_r+0x20>)
 80074d8:	4604      	mov	r4, r0
 80074da:	4608      	mov	r0, r1
 80074dc:	4611      	mov	r1, r2
 80074de:	2200      	movs	r2, #0
 80074e0:	602a      	str	r2, [r5, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	f7fa f91d 	bl	8001722 <_write>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d102      	bne.n	80074f2 <_write_r+0x1e>
 80074ec:	682b      	ldr	r3, [r5, #0]
 80074ee:	b103      	cbz	r3, 80074f2 <_write_r+0x1e>
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	200032e4 	.word	0x200032e4

080074f8 <abort>:
 80074f8:	b508      	push	{r3, lr}
 80074fa:	2006      	movs	r0, #6
 80074fc:	f000 f882 	bl	8007604 <raise>
 8007500:	2001      	movs	r0, #1
 8007502:	f7fa fb3d 	bl	8001b80 <_exit>
	...

08007508 <_close_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	4d06      	ldr	r5, [pc, #24]	; (8007524 <_close_r+0x1c>)
 800750c:	2300      	movs	r3, #0
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fa fb5b 	bl	8001bce <_close>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_close_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_close_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	200032e4 	.word	0x200032e4

08007528 <_fstat_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4d07      	ldr	r5, [pc, #28]	; (8007548 <_fstat_r+0x20>)
 800752c:	2300      	movs	r3, #0
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	4611      	mov	r1, r2
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f7fa fb56 	bl	8001be6 <_fstat>
 800753a:	1c43      	adds	r3, r0, #1
 800753c:	d102      	bne.n	8007544 <_fstat_r+0x1c>
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	b103      	cbz	r3, 8007544 <_fstat_r+0x1c>
 8007542:	6023      	str	r3, [r4, #0]
 8007544:	bd38      	pop	{r3, r4, r5, pc}
 8007546:	bf00      	nop
 8007548:	200032e4 	.word	0x200032e4

0800754c <_isatty_r>:
 800754c:	b538      	push	{r3, r4, r5, lr}
 800754e:	4d06      	ldr	r5, [pc, #24]	; (8007568 <_isatty_r+0x1c>)
 8007550:	2300      	movs	r3, #0
 8007552:	4604      	mov	r4, r0
 8007554:	4608      	mov	r0, r1
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	f7fa fb55 	bl	8001c06 <_isatty>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_isatty_r+0x1a>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_isatty_r+0x1a>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	200032e4 	.word	0x200032e4

0800756c <_lseek_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d07      	ldr	r5, [pc, #28]	; (800758c <_lseek_r+0x20>)
 8007570:	4604      	mov	r4, r0
 8007572:	4608      	mov	r0, r1
 8007574:	4611      	mov	r1, r2
 8007576:	2200      	movs	r2, #0
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	f7fa fb4e 	bl	8001c1c <_lseek>
 8007580:	1c43      	adds	r3, r0, #1
 8007582:	d102      	bne.n	800758a <_lseek_r+0x1e>
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	b103      	cbz	r3, 800758a <_lseek_r+0x1e>
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	bd38      	pop	{r3, r4, r5, pc}
 800758c:	200032e4 	.word	0x200032e4

08007590 <_read_r>:
 8007590:	b538      	push	{r3, r4, r5, lr}
 8007592:	4d07      	ldr	r5, [pc, #28]	; (80075b0 <_read_r+0x20>)
 8007594:	4604      	mov	r4, r0
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	2200      	movs	r2, #0
 800759c:	602a      	str	r2, [r5, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	f7fa faf8 	bl	8001b94 <_read>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	d102      	bne.n	80075ae <_read_r+0x1e>
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	b103      	cbz	r3, 80075ae <_read_r+0x1e>
 80075ac:	6023      	str	r3, [r4, #0]
 80075ae:	bd38      	pop	{r3, r4, r5, pc}
 80075b0:	200032e4 	.word	0x200032e4

080075b4 <_raise_r>:
 80075b4:	291f      	cmp	r1, #31
 80075b6:	b538      	push	{r3, r4, r5, lr}
 80075b8:	4604      	mov	r4, r0
 80075ba:	460d      	mov	r5, r1
 80075bc:	d904      	bls.n	80075c8 <_raise_r+0x14>
 80075be:	2316      	movs	r3, #22
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	bd38      	pop	{r3, r4, r5, pc}
 80075c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075ca:	b112      	cbz	r2, 80075d2 <_raise_r+0x1e>
 80075cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075d0:	b94b      	cbnz	r3, 80075e6 <_raise_r+0x32>
 80075d2:	4620      	mov	r0, r4
 80075d4:	f000 f830 	bl	8007638 <_getpid_r>
 80075d8:	462a      	mov	r2, r5
 80075da:	4601      	mov	r1, r0
 80075dc:	4620      	mov	r0, r4
 80075de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e2:	f000 b817 	b.w	8007614 <_kill_r>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d00a      	beq.n	8007600 <_raise_r+0x4c>
 80075ea:	1c59      	adds	r1, r3, #1
 80075ec:	d103      	bne.n	80075f6 <_raise_r+0x42>
 80075ee:	2316      	movs	r3, #22
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	2001      	movs	r0, #1
 80075f4:	e7e7      	b.n	80075c6 <_raise_r+0x12>
 80075f6:	2400      	movs	r4, #0
 80075f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80075fc:	4628      	mov	r0, r5
 80075fe:	4798      	blx	r3
 8007600:	2000      	movs	r0, #0
 8007602:	e7e0      	b.n	80075c6 <_raise_r+0x12>

08007604 <raise>:
 8007604:	4b02      	ldr	r3, [pc, #8]	; (8007610 <raise+0xc>)
 8007606:	4601      	mov	r1, r0
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	f7ff bfd3 	b.w	80075b4 <_raise_r>
 800760e:	bf00      	nop
 8007610:	20000018 	.word	0x20000018

08007614 <_kill_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_kill_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f7fa fa9d 	bl	8001b60 <_kill>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_kill_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_kill_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	200032e4 	.word	0x200032e4

08007638 <_getpid_r>:
 8007638:	f7fa ba8a 	b.w	8001b50 <_getpid>

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
